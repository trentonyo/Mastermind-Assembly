Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/12/23 07:08:54
Mastermind			(finalProject.asm	     Page 1 - 1


				 TITLE Mastermind			(finalProject.asm)

				; Author(s) : Trenton Young, Hla Htun, Brayden, Cameron Kroeker
				; Course / Project ID  CS 271 / Final Project
				; Description: Play Mastermind! The classic codebreaker game!


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 00000001			TRUE    = 1
 = 00000000			FALSE   = 0

 = 00000002			HIT     = 2
 = 00000001			BLOW    = 1
 = 00000000			MISS    = 0

 = 0000000D			CR = 13
 = 0000000A			LF = 10

 = 00000018			USER_NAME_LEN = 24

 = 00000008			ROUNDS      = 8
 = 00000004			CODE_LENGTH = 4

 = 00000008			COLS = ROUNDS                       ; Semantic equivalents for the game array
 = 00000004			ROWS = CODE_LENGTH                  ;

 = 00000008			COLORS = 8                          ; Number of colored pegs the game uses

 = 00000064			OUT_OF_RANGE_1 = 100
 = 000000C8			OUT_OF_RANGE_2 = 200

				; --------------------------------------------------------
				mPrint          MACRO str
				; Author:       Trenton Young
				; Description:  Basic wrapper for Irvine's WriteString
				;
				; Use:          Pass a string, not the OFFSET
				; --------------------------------------------------------
				    push        EDX

				    mov         EDX, OFFSET str
				    call        WriteString

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mArand          MACRO _low, _high, _target
				; Author:       Trenton Young
				; Description:  Random range [_low.._high] from Irvine's lib,
				;               output is stored in given register
				;
				; Use:          _low (inclusive) and _high  (inclusive) may be
				;               literals, _target may be a register
				; --------------------------------------------------------
				    push        EAX

				    mov         EAX, _high
				    sub         EAX, _low
				    inc         EAX
				    call        RandomRange
				    add         EAX, _low

				    mov         _target, EAX

				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mArrayFlatten   MACRO _ROW, _COL, _baseAddress, _size, _rowSize, _target
				; Author:       Trenton Young
				; Description:  calculates address of index in 2D array given
				;               row and column
				;
				; Use:          Address is stored in _target which may be
				;               a register
				; --------------------------------------------------------
				    push        EAX
				    push        EBX
				    push        EDX

				    mov         EAX, _ROW
				    mov         EBX, _rowSize
				    mul         EBX

				    mov         EBX, _COL
				    add         EAX, EBX

				    mov         EBX, _size
				    mul         EBX

				    mov         EBX, _baseAddress
				    add         EAX, EBX

				    mov         _target, EAX

				    pop         EDX
				    pop         EBX
				    pop         EAX
				ENDM

				; --------------------------------------------------------
				mGotoXY         MACRO _x, _y
				; Author:       Trenton Young
				; Description:  Simple wrapper for Irvine Library's gotoxy,
				;               does not preserve dl or dh
				;
				; Use:          Pass an X and Y value (0-indexed) to move
				;               the cursor
				; --------------------------------------------------------
				    push        EDX

				    mov         dl, _x
				    dec         dl
				    mov         dh, _y
				    dec         dh
				    call        Gotoxy

				    pop         EDX
				ENDM

				; --------------------------------------------------------
				mPlacePeg       MACRO _x, _y, _color
				; Author:       Trenton Young
				; Description:  Draws a peg of the specified color at the
				;               specified location
				;
				; Use:          Pass an X and Y value (0-indexed) and a color
				;               code from the predefined palettes
				; --------------------------------------------------------
				    mGotoXY     _x, _y

				    push        _color
				    call        SetColorFromPalette

				    mPrint      GUI_gameboard_pegs
				ENDM

				; --------------------------------------------------------
				mPlaceFeedback  MACRO _x, _y, _feedback
				; Author:       Trenton Young
				; Description:  Simple wrapper for placing feedback pegs
				;
				; Use:          Pass an X and Y value (0-indexed) and a
				;               value for the feedback (see PlaceFeedback PROC)
				; --------------------------------------------------------
				    push        _x
				    push        _y
				    push        _feedback
				    call        PlaceFeedback
				ENDM

				; --------------------------------------------------------
				mIsArrayElementEqual  MACRO _iArray, _isEqual
				; Author:       Hla Htun
				; Description:  Checks if an array has all equal values
				;
				; Use:          Pass an array and a value to hold 0 or 1 (true or false)
				;               for when an array has one same value in each index
				; --------------------------------------------------------
				    push 0
				    push OFFSET _iArray
				    push TYPE _iArray
				    call ArrayAt
				    mov EBX, EAX

				    mov ECX, 1
				    loopArraym:
				        push ECX
				        push OFFSET _iArray
				        push TYPE _iArray
				        call ArrayAt
				        cmp EBX, EAX
				        JNE isNotEqual
				        cmp ECX, 3
				        JE isEqual
				        add ECX, 1
				        mov EBX, EAX
				        JMP loopArraym

				    isEqual:
				        mov _isEqual, 1
				        JMP goBackNow

				    isNotEqual:
				        mov _isEqual, 0
				        JMP goBackNow


				    goBackNow:

				ENDM


 00000000			.data

				; (Graphics)                Define any ASCII art strings here

 00000000 20 20 20 20 20	GUI_gameboard_A             BYTE        "     |>-~-~-~-~-~-~-~-~-~-~-<|                                                   ", CR, LF, 0
	   7C 3E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 7E 2D
	   7E 2D 7E 2D 7E
	   2D 7E 2D 3C 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00000054 23 23 23 23 23	GUI_gameboard_B             BYTE        "#####|  M A S T E R M I N D  |###################################################", CR, LF, 0
	   7C 20 20 4D 20
	   41 20 53 20 54
	   20 45 20 52 20
	   4D 20 49 20 4E
	   20 44 20 20 7C
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 00
 000000A8 23 20 20 20 20	GUI_gameboard_C             BYTE        "#    |_______________________|                                       #          #", CR, LF, 0
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000000FC 23 20 20 20 20	GUI_gameboard_DE            BYTE        "#     ..      ..      ..      ..      ..      ..      ..      ..     #          #", CR, LF, 0
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 20
	   2E 2E 20 20 20
	   20 20 20 2E 2E
	   20 20 20 20 20
	   20 2E 2E 20 20
	   20 20 20 20 2E
	   2E 20 20 20 20
	   20 20 2E 2E 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 00000150 23 20 20 20 20	GUI_gameboard_SPACE         BYTE        "#                                                                    #          #", CR, LF, 0  ; Line will be repeated
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 000001A4 23 20 20 20 20	GUI_gameboard_PEG           BYTE        "#    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    [  ]    #   [XX]   #", CR, LF, 0  ; Line will be repeated
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 5B
	   20 20 5D 20 20
	   20 20 5B 20 20
	   5D 20 20 20 20
	   5B 20 20 5D 20
	   20 20 20 5B 20
	   20 5D 20 20 20
	   20 5B 20 20 5D
	   20 20 20 20 23
	   20 20 20 5B 58
	   58 5D 20 20 20
	   23 0D 0A 00
 000001F8 23 20 20 20 20	GUI_gameboard_ACCENT        BYTE        "#    ----    ----    ----    ----    ----    ----    ----    ----    #          #", CR, LF, 0
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 23
	   20 20 20 20 20
	   20 20 20 20 20
	   23 0D 0A 00
 0000024C 23 23 23 23 23	GUI_gameboard_Z             BYTE        "#################################################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000029E 2D 40 00		GUI_gameboard_pegs          BYTE        "-@", 0         ; ASCII for a game peg

 000002A1 6F 00			GUI_feedback_hit            BYTE        "o", 0
 000002A3 2A 00			GUI_feedback_blow           BYTE        "*", 0
 000002A5 2E 00			GUI_feedback_miss           BYTE        ".", 0

				;                                       ~ pegs color palette                                                                     ~      ~ feedback color palette  ~
 000002A7 00000004		MAP_background_color        DWORD       red,        gray,       green,      blue,       yellow,     cyan,       magenta,    brown,      white,      white,      white
	   00000008
	   00000002
	   00000001
	   0000000E
	   00000003
	   00000005
	   00000006
	   0000000F
	   0000000F
	   0000000F
 000002D3 0000000F		MAP_text_color              DWORD       white,      white,      black,      white,      black,      black,      black,      white,      black,      gray,       red
	   0000000F
	   00000000
	   0000000F
	   00000000
	   00000000
	   00000000
	   0000000F
	   00000000
	   00000008
	   00000004
				;                                       0           1           2           3           4           5           6           7           8 [miss]    9 [blow]    10 [hit]

				; (Localizations)           Define any messages to be displayed here

 000002FF 79			YES                         BYTE        "y"
 00000300 6E			NO                          BYTE        "n"
 00000301 4C 65 74 27 73	greeting    				BYTE		"Let's play MASTERMIND, ", 0
	   20 70 6C 61 79
	   20 4D 41 53 54
	   45 52 4D 49 4E
	   44 2C 20 00
 00000319 21 0A 0A 00		exclamation                 BYTE        "!", LF, LF, 0
 0000031D 53 65 6C 65 63	selectColor    				BYTE		"Select a color for a peg using the arrow keys, and press enter when done.", CR, LF, 0
	   74 20 61 20 63
	   6F 6C 6F 72 20
	   66 6F 72 20 61
	   20 70 65 67 20
	   75 73 69 6E 67
	   20 74 68 65 20
	   61 72 72 6F 77
	   20 6B 65 79 73
	   2C 20 61 6E 64
	   20 70 72 65 73
	   73 20 65 6E 74
	   65 72 20 77 68
	   65 6E 20 64 6F
	   6E 65 2E 0D 0A
	   00
 00000369 49 6E 76 61 6C	invalidCharMsg              BYTE        "Invalid input, try again.", LF, 0
	   69 64 20 69 6E
	   70 75 74 2C 20
	   74 72 79 20 61
	   67 61 69 6E 2E
	   0A 00

 00000384 54 68 65 6D 27	rules_placeholder           BYTE        "Them's the rules.", CR, LF, 0
	   73 20 74 68 65
	   20 72 75 6C 65
	   73 2E 0D 0A 00

 00000398 57 6F 75 6C 64	prompt_rules                BYTE        "Would you like me to tell you the rules of MASTERMIND? (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   6D 65 20 74 6F
	   20 74 65 6C 6C
	   20 79 6F 75 20
	   74 68 65 20 72
	   75 6C 65 73 20
	   6F 66 20 4D 41
	   53 54 45 52 4D
	   49 4E 44 3F 20
	   28 79 2F 6E 29
	   00
 000003D5 57 6F 75 6C 64	prompt_duplicates           BYTE        "Would you like to allow duplicates in the solution code?", CR, LF, "   WARNING: This significantly increases the challenge of the game. (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 61 6C
	   6C 6F 77 20 64
	   75 70 6C 69 63
	   61 74 65 73 20
	   69 6E 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 63 6F 64 65
	   3F 0D 0A 20 20
	   20 57 41 52 4E
	   49 4E 47 3A 20
	   54 68 69 73 20
	   73 69 67 6E 69
	   66 69 63 61 6E
	   74 6C 79 20 69
	   6E 63 72 65 61
	   73 65 73 20 74
	   68 65 20 63 68
	   61 6C 6C 65 6E
	   67 65 20 6F 66
	   20 74 68 65 20
	   67 61 6D 65 2E
	   20 28 79 2F 6E
	   29 00

				; (Gamestate)               Variables defining gameplay

 00000459 00000000		current_round               DWORD        0

 0000045D  00000004 [		solution                    DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_2)
	    000000C8
	   ]
 0000046D  00000004 [		game_matrix                 DWORD       CODE_LENGTH DUP(ROUNDS DUP(?))
	    00000008 [
	     00000000
	    ]
	   ]
				; Created for key inputs.Will hold current user's guess
 000004ED  00000004 [		user_guess                  DWORD       CODE_LENGTH DUP(OUT_OF_RANGE_1)
	    00000064
	   ]

 000004FD 00000000		userHasWon                  DWORD       FALSE
 00000501 00000000		allowDuplicates             DWORD       FALSE

				; Hits and Blows            hits and blows will be stored in these variables
 00000505 00000000		hits                        DWORD       0
 00000509 00000000		blows                       DWORD       0
 0000050D 00000000		helperVar1                  DWORD       ?
 00000511 00000000		T_HelperVar                 DWORD       ?
 00000515 00000000		matches                     DWORD       ?

 00000519 00000007		currX                       DWORD       7               ; Helper var for GetUserCode. Stores current X coordinate. FOR START OF GAME, SET TO 7 ; TODO can probably be calculated on the fly (from test phase) - Trenton Young
 0000051D 00000007		currY                       DWORD       7               ; Helper var for GetUserCode. Stores current Y coordinate. FOR START OF GAME, SET TO 7
 00000521 00000000		currIndex                   DWORD       0               ; Helper var for GetUserCode. Will store current array index.

				; Game Rules
 00000525 0D 0A 52 75 6C	RULES_1                     BYTE        CR, LF, "Rules:", CR, LF, 0
	   65 73 3A 0D 0A
	   00
 00000530 20 20 20 20 2D	RULES_GAP                   BYTE        "    - ", 0
	   20 00
 00000537 54 68 65 20 70	RULES_2                     BYTE        "The program randomly places 4 pegs in a certain order", CR, LF, 0
	   72 6F 67 72 61
	   6D 20 72 61 6E
	   64 6F 6D 6C 79
	   20 70 6C 61 63
	   65 73 20 34 20
	   70 65 67 73 20
	   69 6E 20 61 20
	   63 65 72 74 61
	   69 6E 20 6F 72
	   64 65 72 0D 0A
	   00
 0000056F 59 6F 75 72 20	RULES_3                     BYTE        "Your goal is to guess the exact positions and colors of each of those pegs before you run out of attempts!", CR, LF, 0
	   67 6F 61 6C 20
	   69 73 20 74 6F
	   20 67 75 65 73
	   73 20 74 68 65
	   20 65 78 61 63
	   74 20 70 6F 73
	   69 74 69 6F 6E
	   73 20 61 6E 64
	   20 63 6F 6C 6F
	   72 73 20 6F 66
	   20 65 61 63 68
	   20 6F 66 20 74
	   68 6F 73 65 20
	   70 65 67 73 20
	   62 65 66 6F 72
	   65 20 79 6F 75
	   20 72 75 6E 20
	   6F 75 74 20 6F
	   66 20 61 74 74
	   65 6D 70 74 73
	   21 0D 0A 00
 000005DC 59 6F 75 27 6C	RULES_4                     BYTE        "You'll make guesses by selecting colors from a choice of 8 (red, gray, green, blue, yellow, cyan, magenta, brown)", CR, LF, 0
	   6C 20 6D 61 6B
	   65 20 67 75 65
	   73 73 65 73 20
	   62 79 20 73 65
	   6C 65 63 74 69
	   6E 67 20 63 6F
	   6C 6F 72 73 20
	   66 72 6F 6D 20
	   61 20 63 68 6F
	   69 63 65 20 6F
	   66 20 38 20 28
	   72 65 64 2C 20
	   67 72 61 79 2C
	   20 67 72 65 65
	   6E 2C 20 62 6C
	   75 65 2C 20 79
	   65 6C 6C 6F 77
	   2C 20 63 79 61
	   6E 2C 20 6D 61
	   67 65 6E 74 61
	   2C 20 62 72 6F
	   77 6E 29 0D 0A
	   00
 00000650 55 73 65 20 28	RULES_5                     BYTE        "Use ( <- ) left or ( -> ) right arrow keys to switch between different color choices", CR, LF, 0
	   20 3C 2D 20 29
	   20 6C 65 66 74
	   20 6F 72 20 28
	   20 2D 3E 20 29
	   20 72 69 67 68
	   74 20 61 72 72
	   6F 77 20 6B 65
	   79 73 20 74 6F
	   20 73 77 69 74
	   63 68 20 62 65
	   74 77 65 65 6E
	   20 64 69 66 66
	   65 72 65 6E 74
	   20 63 6F 6C 6F
	   72 20 63 68 6F
	   69 63 65 73 0D
	   0A 00
 000006A7 55 73 65 20 45	RULES_6                     BYTE        "Use Enter/Return key to confirm your choice", CR, LF, 0
	   6E 74 65 72 2F
	   52 65 74 75 72
	   6E 20 6B 65 79
	   20 74 6F 20 63
	   6F 6E 66 69 72
	   6D 20 79 6F 75
	   72 20 63 68 6F
	   69 63 65 0D 0A
	   00
 000006D5 59 6F 75 20 63	RULES_7                     BYTE        "You can also ( ", 24, " ) up or ( " , 25, " ) down arrow keys to go back and forth between input fields", CR, LF, 0
	   61 6E 20 61 6C
	   73 6F 20 28 20
	   18 20 29 20 75
	   70 20 6F 72 20
	   28 20 19 20 29
	   20 64 6F 77 6E
	   20 61 72 72 6F
	   77 20 6B 65 79
	   73 20 74 6F 20
	   67 6F 20 62 61
	   63 6B 20 61 6E
	   64 20 66 6F 72
	   74 68 20 62 65
	   74 77 65 65 6E
	   20 69 6E 70 75
	   74 20 66 69 65
	   6C 64 73 0D 0A
	   00
 00000730 43 6F 72 72 65	RULES_8                     BYTE        "Correct guess (right color and position) also known as a 'hit' will be displayed as 'o'", CR, LF, 0
	   63 74 20 67 75
	   65 73 73 20 28
	   72 69 67 68 74
	   20 63 6F 6C 6F
	   72 20 61 6E 64
	   20 70 6F 73 69
	   74 69 6F 6E 29
	   20 61 6C 73 6F
	   20 6B 6E 6F 77
	   6E 20 61 73 20
	   61 20 27 68 69
	   74 27 20 77 69
	   6C 6C 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 73 20 27
	   6F 27 0D 0A 00
 0000078A 53 65 6D 69 2D	RULES_9                     BYTE        "Semi-correct guess (right color but not position) also known as a 'blow' will be displayed as '*'", CR, LF, 0
	   63 6F 72 72 65
	   63 74 20 67 75
	   65 73 73 20 28
	   72 69 67 68 74
	   20 63 6F 6C 6F
	   72 20 62 75 74
	   20 6E 6F 74 20
	   70 6F 73 69 74
	   69 6F 6E 29 20
	   61 6C 73 6F 20
	   6B 6E 6F 77 6E
	   20 61 73 20 61
	   20 27 62 6C 6F
	   77 27 20 77 69
	   6C 6C 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 73 20 27
	   2A 27 0D 0A 00
 000007EE 57 72 6F 6E 67	RULES_10                    BYTE        "Wrong guess also known as a 'miss' will be displayed as '.'", CR, LF, LF, 0
	   20 67 75 65 73
	   73 20 61 6C 73
	   6F 20 6B 6E 6F
	   77 6E 20 61 73
	   20 61 20 27 6D
	   69 73 73 27 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 61 73
	   20 27 2E 27 0D
	   0A 0A 00

 0000082D 00000000		H_HelperVar1                DWORD       ?               ; Helper var for GameTurn (Place feedback loop counter)
 00000831 00000000		H_HelperVar2                DWORD       ?               ; Helper var for GameTurn (Place feedback loop counter)
 00000835 00000000		H_HelperVarX                DWORD       ?               ; Helper var for GameTurn - Holds the x coordinate for placing the feedback
 00000839 00000000		H_HelperVarY                DWORD       ?               ; Helper var for GameTurn - Holds the y coordinate for placing the feedback
 0000083D 00000000		H_HelperVarMovY             DWORD       ?               ; Helper var for GameTurn - Helps decide whether to reset X to original position or not and increment Y by 1

 00000841 00000000		hasWon                      DWORD       ?

 00000845 20 20 20 47 72	Celebration                 BYTE        "   Great job! You correctly guessed the color and position of each of the pegs!", CR, LF, 0
	   65 61 74 20 6A
	   6F 62 21 20 59
	   6F 75 20 63 6F
	   72 72 65 63 74
	   6C 79 20 67 75
	   65 73 73 65 64
	   20 74 68 65 20
	   63 6F 6C 6F 72
	   20 61 6E 64 20
	   70 6F 73 69 74
	   69 6F 6E 20 6F
	   66 20 65 61 63
	   68 20 6F 66 20
	   74 68 65 20 70
	   65 67 73 21 0D
	   0A 00

 00000897 20 20 20 55 68	Loser                       BYTE        "   Uh..oh! You've ran out of attempts :(", CR, LF, 0
	   2E 2E 6F 68 21
	   20 59 6F 75 27
	   76 65 20 72 61
	   6E 20 6F 75 74
	   20 6F 66 20 61
	   74 74 65 6D 70
	   74 73 20 3A 28
	   0D 0A 00

 000008C2 20 20 20 57 6F	prompt_tryAgain             BYTE        "   Would you like to try again? (y/n)", CR, LF, 0
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 74 72 79 20
	   61 67 61 69 6E
	   3F 20 28 79 2F
	   6E 29 0D 0A 00

 000008EA 0A 54 68 61 6E	farewell                    BYTE        LF, "Thank you for playing our game!" , LF, "Programmed by Trenton Young, Brayden Aldrich, Hla Htun and Cameron Kroeker", LF, LF, 0
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 20 6F 75
	   72 20 67 61 6D
	   65 21 0A 50 72
	   6F 67 72 61 6D
	   6D 65 64 20 62
	   79 20 54 72 65
	   6E 74 6F 6E 20
	   59 6F 75 6E 67
	   2C 20 42 72 61
	   79 64 65 6E 20
	   41 6C 64 72 69
	   63 68 2C 20 48
	   6C 61 20 48 74
	   75 6E 20 61 6E
	   64 20 43 61 6D
	   65 72 6F 6E 20
	   4B 72 6F 65 6B
	   65 72 0A 0A 00

 00000958 50 6C 65 61 73	prompt_userName             BYTE        "Please type your name: ", 0
	   65 20 74 79 70
	   65 20 79 6F 75
	   72 20 6E 61 6D
	   65 3A 20 00
 00000970 00			userName                    BYTE        ?

				;   FPU AND RECURSIVE REQUIREMENT STRINGS
 00000971 4F 75 72 20 67	REQ_question            BYTE    "Our game doesn't use the FPU or recursive procedures. Would you like to see two simple outputs for these? (y/n)", 10, 13, 0
	   61 6D 65 20 64
	   6F 65 73 6E 27
	   74 20 75 73 65
	   20 74 68 65 20
	   46 50 55 20 6F
	   72 20 72 65 63
	   75 72 73 69 76
	   65 20 70 72 6F
	   63 65 64 75 72
	   65 73 2E 20 57
	   6F 75 6C 64 20
	   79 6F 75 20 6C
	   69 6B 65 20 74
	   6F 20 73 65 65
	   20 74 77 6F 20
	   73 69 6D 70 6C
	   65 20 6F 75 74
	   70 75 74 73 20
	   66 6F 72 20 74
	   68 65 73 65 3F
	   20 28 79 2F 6E
	   29 0A 0D 00
 000009E3 50 72 65 73 73	REQ_moveon              BYTE    "Press enter to move on...", 10, 13, 0
	   20 65 6E 74 65
	   72 20 74 6F 20
	   6D 6F 76 65 20
	   6F 6E 2E 2E 2E
	   0A 0D 00
 000009FF 4C 65 74 27 73	FPU_intro_string		BYTE   	"Let's do some FPU addition to start.", 10, 13, 0
	   20 64 6F 20 73
	   6F 6D 65 20 46
	   50 55 20 61 64
	   64 69 74 69 6F
	   6E 20 74 6F 20
	   73 74 61 72 74
	   2E 0A 0D 00
 00000A26 50 6C 65 61 73	FPU_getUserFirstNum 	BYTE 	"Please type your first real number: ", 10, 13, 0
	   65 20 74 79 70
	   65 20 79 6F 75
	   72 20 66 69 72
	   73 74 20 72 65
	   61 6C 20 6E 75
	   6D 62 65 72 3A
	   20 0A 0D 00
 00000A4D 50 6C 65 61 73	FPU_getUserSecNum 		BYTE 	"Please type your second real number: ", 10, 13, 0
	   65 20 74 79 70
	   65 20 79 6F 75
	   72 20 73 65 63
	   6F 6E 64 20 72
	   65 61 6C 20 6E
	   75 6D 62 65 72
	   3A 20 0A 0D 00
 00000A75 54 68 65 20 73	FPU_result 				BYTE 	"The sum of the two real numbers is: ", 10, 13, 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   74 77 6F 20 72
	   65 61 6C 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 0A 0D 00
 00000A9C 4E 6F 77 20 6C	REC_intro 				BYTE 	"Now let's recursively sum numbers!", 10, 13, 0
	   65 74 27 73 20
	   72 65 63 75 72
	   73 69 76 65 6C
	   79 20 73 75 6D
	   20 6E 75 6D 62
	   65 72 73 21 0A
	   0D 00
 00000AC1 43 68 6F 6F 73	REC_getN			    BYTE 	"Choose a number from [2-500]", 10, 13, 0
	   65 20 61 20 6E
	   75 6D 62 65 72
	   20 66 72 6F 6D
	   20 5B 32 2D 35
	   30 30 5D 0A 0D
	   00
 00000AE0 00000000		REC_n                   DWORD   ?
 00000AE4 55 73 69 6E 67	REC_final               BYTE    "Using recursion, I found that the sum is: ",0
	   20 72 65 63 75
	   72 73 69 6F 6E
	   2C 20 49 20 66
	   6F 75 6E 64 20
	   74 68 61 74 20
	   74 68 65 20 73
	   75 6D 20 69 73
	   3A 20 00
 00000B0F 00000000		REC_answer				DWORD 	?


 00000000			.code
 00000000			main PROC; (insert executable instructions here)

				; --------------------------------------------------------
 00000000			FPUandREC:
				;
				;   There are 2 functions:
				;   1) Get 2 real numbers from user and do an FPU addition
				;   2) Get a number from the user and sum all numbers up to desired number
				;
				; --------------------------------------------------------
 00000000  60			    pushad
 00000001  68 00000971 R	    push            OFFSET REQ_question
 00000006  E8 0000082F		    call            PromptMsg
 0000000B  83 F8 00		    cmp             EAX, FALSE                      ; check if user doesn't wanna see this
 0000000E  0F 84 00000090	    je              _end

				    
 00000014  E8 00000B02		    call            AddFPU                          ; Call AddFPU proc

				    mPrint          REC_intro                       
 00000019  52		     1	    push        EDX
 0000001A  BA 00000A9C R     1	    mov         EDX, OFFSET REC_intro
 0000001F  E8 00000000 E     1	    call        WriteString
 00000024  5A		     1	    pop         EDX
				    ; Get a valid number from user
 00000025			    start:                                          
				        mPrint          REC_getN
 00000025  52		     1	    push        EDX
 00000026  BA 00000AC1 R     1	    mov         EDX, OFFSET REC_getN
 0000002B  E8 00000000 E     1	    call        WriteString
 00000030  5A		     1	    pop         EDX
 00000031  E8 00000000 E	        call            Readint
 00000036  83 F8 02		        cmp             EAX, 2
 00000039  7C 09		        jl              _invalid
 0000003B  3D 000001F4		        cmp             EAX, 500
 00000040  7F 02		        jg              _invalid
 00000042  EB 0E		        jmp             _valid
 00000044			    _invalid:

				        mPrint          invalidCharMsg
 00000044  52		     1	    push        EDX
 00000045  BA 00000369 R     1	    mov         EDX, OFFSET invalidCharMsg
 0000004A  E8 00000000 E     1	    call        WriteString
 0000004F  5A		     1	    pop         EDX
 00000050  EB D3		        jmp             start

 00000052			    _valid:
 00000052  A3 00000AE0 R	        mov             REC_n, EAX                  
 00000057  B8 00000000		        mov             EAX, 0
 0000005C  8B 0D 00000AE0 R	        mov             ECX, REC_n  
 00000062  E8 00000A9F		        call            RSum                        ; Using the EAX and ECX recursively sum the numbers    
				        mPrint          REC_final
 00000067  52		     1	    push        EDX
 00000068  BA 00000AE4 R     1	    mov         EDX, OFFSET REC_final
 0000006D  E8 00000000 E     1	    call        WriteString
 00000072  5A		     1	    pop         EDX
 00000073  E8 00000000 E	        call            Writedec
 00000078  E8 00000000 E	        call            CrLf
				        mPrint          REQ_moveon
 0000007D  52		     1	    push        EDX
 0000007E  BA 000009E3 R     1	    mov         EDX, OFFSET REQ_moveon
 00000083  E8 00000000 E     1	    call        WriteString
 00000088  5A		     1	    pop         EDX
				    ; loop until user hits the enter key
 00000089			    _l:
 00000089  B8 00000032		        mov         EAX, 50
 0000008E  E8 00000000 E	        call        Delay
 00000093  E8 00000000 E	        call        ReadKey
 00000098  74 EF		        jz          _l

 0000009A  0F B7 D2		    movzx           EDX, DX
 0000009D  83 FA 0D		    cmp             EDX, 13
 000000A0  74 02		    je              _end
 000000A2  EB E5		    jmp             _l
				    
 000000A4			    _end:
 000000A4  61			    popad



				; --------------------------------------------------------
 000000A5			ProgramSetup:
				;
				; Runs functions that set the environment to expected parameters,
				; seeds the random number generator, initiates the FPU, sets the
				; text and background color
				; --------------------------------------------------------
 000000A5  9B DB E3		    finit
 000000A8  E8 00000000 E	    call            Randomize

 000000AD  6A 08		    push            8
 000000AF  E8 000003C8		    call            SetColorFromPalette


 000000B4			InitialGreeting:
				;
				; Prompts the user for their name then greets them
				; --------------------------------------------------------
 000000B4  E8 00000000 E	    call            Clrscr
 000000B9  E8 000009FC		    call            getName
				; --------------------------------------------------------
 000000BE			PromptForRules:
				;
				; Prompts the user asking if they would like the rules of the
				; game to be displayed
				; --------------------------------------------------------

 000000BE  68 00000398 R	    push            OFFSET prompt_rules
 000000C3  E8 00000772		    call            PromptMsg

				;   If the user does not want the rules displayed
 000000C8  E8 00000000 E	    call            Crlf
 000000CD  83 F8 00		    cmp             EAX, FALSE
 000000D0  0F 84 000000F0	    je              NewGamestate
 000000D6  EB 00		    JMP             DisplayRules

				; --------------------------------------------------------
 000000D8			DisplayRules:
				; Author: Hla Htun
				; Prints the rules of the game and then waits for the user to
				; press a key before continuing, to give them a chance to read
				; --------------------------------------------------------

				    ; TODO EXTRA: file IO the rules
				    ; TODO EXTRA: we could have two different messages, the initial
				    ;           print which goes into detail and a subsequent version
				    ;           which is less verbose
				    mPrint      OFFSET RULES_1
 000000D8  52		     1	    push        EDX
 000000D9  BA 00000525 R     1	    mov         EDX, OFFSET OFFSET RULES_1
 000000DE  E8 00000000 E     1	    call        WriteString
 000000E3  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000E4  52		     1	    push        EDX
 000000E5  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000000EA  E8 00000000 E     1	    call        WriteString
 000000EF  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_2
 000000F0  52		     1	    push        EDX
 000000F1  BA 00000537 R     1	    mov         EDX, OFFSET OFFSET RULES_2
 000000F6  E8 00000000 E     1	    call        WriteString
 000000FB  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000000FC  52		     1	    push        EDX
 000000FD  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000102  E8 00000000 E     1	    call        WriteString
 00000107  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_3
 00000108  52		     1	    push        EDX
 00000109  BA 0000056F R     1	    mov         EDX, OFFSET OFFSET RULES_3
 0000010E  E8 00000000 E     1	    call        WriteString
 00000113  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 00000114  52		     1	    push        EDX
 00000115  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 0000011A  E8 00000000 E     1	    call        WriteString
 0000011F  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_4
 00000120  52		     1	    push        EDX
 00000121  BA 000005DC R     1	    mov         EDX, OFFSET OFFSET RULES_4
 00000126  E8 00000000 E     1	    call        WriteString
 0000012B  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000012C  52		     1	    push        EDX
 0000012D  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000132  E8 00000000 E     1	    call        WriteString
 00000137  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_5
 00000138  52		     1	    push        EDX
 00000139  BA 00000650 R     1	    mov         EDX, OFFSET OFFSET RULES_5
 0000013E  E8 00000000 E     1	    call        WriteString
 00000143  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 00000144  52		     1	    push        EDX
 00000145  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 0000014A  E8 00000000 E     1	    call        WriteString
 0000014F  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_6
 00000150  52		     1	    push        EDX
 00000151  BA 000006A7 R     1	    mov         EDX, OFFSET OFFSET RULES_6
 00000156  E8 00000000 E     1	    call        WriteString
 0000015B  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000015C  52		     1	    push        EDX
 0000015D  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000162  E8 00000000 E     1	    call        WriteString
 00000167  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_7
 00000168  52		     1	    push        EDX
 00000169  BA 000006D5 R     1	    mov         EDX, OFFSET OFFSET RULES_7
 0000016E  E8 00000000 E     1	    call        WriteString
 00000173  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 00000174  52		     1	    push        EDX
 00000175  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 0000017A  E8 00000000 E     1	    call        WriteString
 0000017F  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_8
 00000180  52		     1	    push        EDX
 00000181  BA 00000730 R     1	    mov         EDX, OFFSET OFFSET RULES_8
 00000186  E8 00000000 E     1	    call        WriteString
 0000018B  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 0000018C  52		     1	    push        EDX
 0000018D  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 00000192  E8 00000000 E     1	    call        WriteString
 00000197  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_9
 00000198  52		     1	    push        EDX
 00000199  BA 0000078A R     1	    mov         EDX, OFFSET OFFSET RULES_9
 0000019E  E8 00000000 E     1	    call        WriteString
 000001A3  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_GAP
 000001A4  52		     1	    push        EDX
 000001A5  BA 00000530 R     1	    mov         EDX, OFFSET OFFSET RULES_GAP
 000001AA  E8 00000000 E     1	    call        WriteString
 000001AF  5A		     1	    pop         EDX
				    mPrint      OFFSET RULES_10
 000001B0  52		     1	    push        EDX
 000001B1  BA 000007EE R     1	    mov         EDX, OFFSET OFFSET RULES_10
 000001B6  E8 00000000 E     1	    call        WriteString
 000001BB  5A		     1	    pop         EDX

 000001BC  E8 00000000 E	    call        WaitMsg
 000001C1  E8 00000000 E	    call        Clrscr
				; --------------------------------------------------------
				; If the user has won the game, then they may allow for duplicates
				; in the solution code
 000001C6			NewGameState:
				;cmp                 userHasWon, TRUE
				;jne                 NewGameState
				;PromptForDuplicates:
				;
				; Allow the user to choose if they want to allow duplicate
				; colors in the code, let user know that there may be more
				; than two of any given color if they agree.
				    ; reset all variables to its initial state
 000001C6  C7 05 0000082D R	    mov             H_HelperVar1, 0
	   00000000
 000001D0  C7 05 00000831 R	    mov             H_HelperVar2, 0
	   00000000
 000001DA  C7 05 00000835 R	    mov             H_HelperVarX, 7
	   00000007
 000001E4  C7 05 00000839 R	    mov             H_HelperVarY, 4
	   00000004
 000001EE  C7 05 0000083D R	    mov             H_HelperVarMovY, 0
	   00000000
 000001F8  C7 05 00000841 R	    mov             hasWon, 0
	   00000000
 00000202  C7 05 00000519 R	    mov             currX, 7
	   00000007
 0000020C  C7 05 0000051D R	    mov             currY, 7
	   00000007
 00000216  C7 05 00000521 R	    mov             currIndex, 0
	   00000000

 00000220  68 000003D5 R	    push            OFFSET prompt_duplicates
 00000225  E8 00000610		    call            PromptMsg

				    ; Store the user's decision
 0000022A  A3 00000501 R	    mov             allowDuplicates, EAX

				; --------------------------------------------------------
 0000022F			GenerateGamestate:
				;
				; Print a new gameboard, set the round to zero, and generate a new
				; solution code
				; --------------------------------------------------------

 0000022F  E8 000000DA		    call            DrawNewGameboard
 00000234  C7 05 00000459 R	    mov             current_round, 0
	   00000000

 0000023E  FF 35 00000501 R	    push            allowDuplicates
 00000244  6A 04		    push            TYPE solution
 00000246  68 0000045D R	    push            OFFSET solution
 0000024B  E8 00000145		    call            GenerateCode


				; --------------------------------------------------------
 00000250  B9 00000008		mov                 ECX, ROUNDS
 00000255			GameTurn:
				;
				; Get the user's input, check against the solution, give the
				; user feedback, and repeat until the user is out of turns or
				; guesses the solution
				; --------------------------------------------------------

				    ; Get input from the user
 00000255  68 000004ED R	    push            OFFSET user_guess
 0000025A  E8 0000042B		    call            GetUserCode

				    ; Check the user's move against solution
 0000025F  68 00000509 R	    push            OFFSET blows
 00000264  68 00000505 R	    push            OFFSET hits
 00000269  E8 000002BF		    call            CheckSimilar

				    ; TODO store the guess in the game_matrix


				    ; Draws feedbacks
 0000026E  51			    push            ECX
 0000026F  E8 0000062C		    call            PlaceFeedbackGameTurn

				    ; Debug for PlaceFeedbackGameTurn and CheckSimilar
				    ;mGotoXY         1, 25
				    ;call            debugHH

 00000274  83 3D 00000505 R	    cmp             hits, 4
	   04
 0000027B  74 22		    JE              WinnerCelebration

 0000027D  83 3D 00000459 R	    cmp             current_round, 7
	   07
 00000284  74 40		    JE              LoserAdmonishment

				    ; If no endgame conditions are met, the user takes another turn
 00000286  FF 05 00000459 R	    inc             current_round
 0000028C  83 05 00000519 R	    add             currX, 8
	   08
 00000293  C7 05 00000521 R	    mov             currIndex, 0
	   00000000
 0000029D  E2 B6		    loop            GameTurn


				; --------------------------------------------------------
 0000029F			WinnerCelebration:
				; Author: Hla Htun
				; Notify the user that they have won
				; --------------------------------------------------------
				    mGotoXY     1, 19
 0000029F  52		     1	    push        EDX
 000002A0  B2 01	     1	    mov         dl, 1
 000002A2  FE CA	     1	    dec         dl
 000002A4  B6 13	     1	    mov         dh, 19
 000002A6  FE CE	     1	    dec         dh
 000002A8  E8 00000000 E     1	    call        Gotoxy
 000002AD  5A		     1	    pop         EDX
				    mPrint      Celebration
 000002AE  52		     1	    push        EDX
 000002AF  BA 00000845 R     1	    mov         EDX, OFFSET Celebration
 000002B4  E8 00000000 E     1	    call        WriteString
 000002B9  5A		     1	    pop         EDX
 000002BA  C7 05 00000841 R	    mov         hasWon, TRUE
	   00000001
 000002C4  EB 22		    JMP         PromptForPlayAgain
				; --------------------------------------------------------
 000002C6			LoserAdmonishment:
				; Author: Hla Htun
				; Notify the user that they are a loser
				; --------------------------------------------------------
 000002C6  E8 0000030D		    call PrintSolution
				    mGotoXY     1, 19
 000002CB  52		     1	    push        EDX
 000002CC  B2 01	     1	    mov         dl, 1
 000002CE  FE CA	     1	    dec         dl
 000002D0  B6 13	     1	    mov         dh, 19
 000002D2  FE CE	     1	    dec         dh
 000002D4  E8 00000000 E     1	    call        Gotoxy
 000002D9  5A		     1	    pop         EDX
				    mPrint      Loser
 000002DA  52		     1	    push        EDX
 000002DB  BA 00000897 R     1	    mov         EDX, OFFSET Loser
 000002E0  E8 00000000 E     1	    call        WriteString
 000002E5  5A		     1	    pop         EDX
 000002E6  EB 00		    JMP         PromptForPlayAgain

				; --------------------------------------------------------
 000002E8			PromptForPlayAgain:
				; Author: Hla Htun
				; Prompt the user to play the game again
				; --------------------------------------------------------
 000002E8  68 000008C2 R	    push        OFFSET prompt_tryAgain
 000002ED  E8 00000548		    call        PromptMsg

 000002F2  83 F8 01		    cmp         EAX, TRUE
 000002F5  0F 84 FFFFFDAA	    JE          ProgramSetup

 000002FB			_Farewell:
				    mPrint      farewell
 000002FB  52		     1	    push        EDX
 000002FC  BA 000008EA R     1	    mov         EDX, OFFSET farewell
 00000301  E8 00000000 E     1	    call        WriteString
 00000306  5A		     1	    pop         EDX

				invoke EXITProcess, 0		; exit to operating system
 00000307  6A 00	   *	    push   +000000000h
 00000309  E8 00000000 E   *	    call   ExitProcess
 0000030E			main ENDP

				; (insert additional procedures here)

				; -------------------------------------------------------- -
 0000030E			DrawNewGameboard PROC
				; Author:           Trenton Young
				; Description:      Simply clears the screen and draws a new gameboard
				;
				; Preconditions:    Define global gameboard strings
				; Postconditions:   Screen is cleared, new gameboard is written
				; -------------------------------------------------------- -
 0000030E  51			push        ECX

 0000030F  E8 00000000 E	call        Clrscr

				mPrint      GUI_gameboard_A
 00000314  52		     1	    push        EDX
 00000315  BA 00000000 R     1	    mov         EDX, OFFSET GUI_gameboard_A
 0000031A  E8 00000000 E     1	    call        WriteString
 0000031F  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_B
 00000320  52		     1	    push        EDX
 00000321  BA 00000054 R     1	    mov         EDX, OFFSET GUI_gameboard_B
 00000326  E8 00000000 E     1	    call        WriteString
 0000032B  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_C
 0000032C  52		     1	    push        EDX
 0000032D  BA 000000A8 R     1	    mov         EDX, OFFSET GUI_gameboard_C
 00000332  E8 00000000 E     1	    call        WriteString
 00000337  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000338  52		     1	    push        EDX
 00000339  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 0000033E  E8 00000000 E     1	    call        WriteString
 00000343  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_DE
 00000344  52		     1	    push        EDX
 00000345  BA 000000FC R     1	    mov         EDX, OFFSET GUI_gameboard_DE
 0000034A  E8 00000000 E     1	    call        WriteString
 0000034F  5A		     1	    pop         EDX

 00000350  B9 00000004		mov         ECX, ROWS
 00000355			_printPlayArea:
				    mPrint      GUI_gameboard_SPACE
 00000355  52		     1	    push        EDX
 00000356  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 0000035B  E8 00000000 E     1	    call        WriteString
 00000360  5A		     1	    pop         EDX
				    mPrint      GUI_gameboard_PEG
 00000361  52		     1	    push        EDX
 00000362  BA 000001A4 R     1	    mov         EDX, OFFSET GUI_gameboard_PEG
 00000367  E8 00000000 E     1	    call        WriteString
 0000036C  5A		     1	    pop         EDX

 0000036D  E2 E6		    loop        _printPlayArea

				mPrint      GUI_gameboard_ACCENT
 0000036F  52		     1	    push        EDX
 00000370  BA 000001F8 R     1	    mov         EDX, OFFSET GUI_gameboard_ACCENT
 00000375  E8 00000000 E     1	    call        WriteString
 0000037A  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_SPACE
 0000037B  52		     1	    push        EDX
 0000037C  BA 00000150 R     1	    mov         EDX, OFFSET GUI_gameboard_SPACE
 00000381  E8 00000000 E     1	    call        WriteString
 00000386  5A		     1	    pop         EDX
				mPrint      GUI_gameboard_Z
 00000387  52		     1	    push        EDX
 00000388  BA 0000024C R     1	    mov         EDX, OFFSET GUI_gameboard_Z
 0000038D  E8 00000000 E     1	    call        WriteString
 00000392  5A		     1	    pop         EDX

 00000393  59			pop         ECX

 00000394  C3			ret
 00000395			DrawNewGameboard ENDP

				; -------------------------------------------------------- -
 00000395			GenerateCode PROC
				; Author:           Trenton Young
				; Description:      Generates a code of the length defined by the
				;                   const CODE_LENGTH, if TRUE is passed as a
				;                   parameter, will allow duplicates
				;
				; Parameters:       push TRUE/FALSE * optional
				;                   push TYPE target
				;                   push OFFSET target
				;                   call
				;
				; Preconditions:    Define global const CODE_LENGTH
				; Postconditions:   Target will contain the new code,
				;                   user_guess and solution will be mutated
				; -------------------------------------------------------- -
 00000395  55			push        EBP
 00000396  8B EC		mov         EBP, ESP    ; register-indirect initialization

 00000398  50			push        EAX
 00000399  53			push        EBX
 0000039A  51			push        ECX
 0000039B  52			push        EDX

 0000039C  B8 00000000		mov         EAX, 0
 000003A1  B9 00000004		mov         ECX, CODE_LENGTH
 000003A6  C7 05 00000511 R	mov         T_HelperVar, 0
	   00000000
				;inc         ECX

 000003B0			_clearCheckArrays:
 000003B0  C7 80 000004ED R	    mov     user_guess[EAX], OUT_OF_RANGE_1
	   00000064
 000003BA  C7 80 0000045D R	    mov     solution[EAX], OUT_OF_RANGE_2
	   000000C8

 000003C4  83 C0 04		    add     EAX, TYPE user_guess
 000003C7  E2 E7		    loop    _clearCheckArrays

 000003C9  C7 05 00000511 R	    mov     T_HelperVar, 0            ; initialize index accumulator
	   00000000

 000003D3			_stackFrame:
 000003D3  B9 00000004		    mov     ECX, CODE_LENGTH
 000003D8  8B 55 10		    mov     EDX, [EBP + 16]         ; [OPTIONAL] if TRUE, will allow duplicates in code
 000003DB  8B 5D 0C		    mov     EBX, [EBP + 12]         ; TYPE of target array
 000003DE  8B 45 08		    mov     EAX, [EBP + 8]          ; OFFSET of target array

 000003E1			_generateCode:
 000003E1  8B 55 10		    mov     EDX, [EBP + 16]         ; Reclaim the duplicate flag
 000003E4  51			    push    ECX                     ; Preserve loop counter

 000003E5  50			    push    EAX
 000003E6  B8 00000008		    mov     EAX, COLORS
 000003EB  48			    dec     EAX
				    mArand  0, EAX, ECX             ; Get a random number and store to ECX
 000003EC  50		     1	    push        EAX
 000003ED  8B C0	     1	    mov         EAX, EAX
 000003EF  83 E8 00	     1	    sub         EAX, 0
 000003F2  40		     1	    inc         EAX
 000003F3  E8 00000000 E     1	    call        RandomRange
 000003F8  83 C0 00	     1	    add         EAX, 0
 000003FB  8B C8	     1	    mov         ECX, EAX
 000003FD  58		     1	    pop         EAX
 000003FE  58			    pop     EAX

 000003FF  83 FA 01		    cmp     EDX, TRUE
 00000402  74 4D		    je     _allowDuplicates

				    ; ELSE, check if random number is already in code
 00000404  8B D1		    mov     EDX, ECX                ; EDX is now random number
 00000406  59			    pop     ECX                     ; ECX is loop counter again

 00000407			    _checkCode:
 00000407  89 15 000004ED R	        mov             user_guess[0], EDX      ; Store the current candidate in user_guess[0]

				        ; comparing user_guess(candidate, index, ?, ?) and solution(accepted codes) elements - updates hits and blows
 0000040D  68 00000509 R	        push            OFFSET blows
 00000412  68 00000505 R	        push            OFFSET hits
 00000417  E8 00000111		        call            CheckSimilar

 0000041C  83 3D 00000505 R	        cmp             hits, 0
	   00
 00000423  7F BC		        jg              _generateCode
 00000425  83 3D 00000509 R	        cmp             blows, 0
	   00
 0000042C  7F B3		        jg              _generateCode       ; check if the candidate has already been selected, run generate code over if so

 0000042E  53			        push            EBX
 0000042F  8B 1D 00000511 R	        mov             EBX, T_HelperVar
 00000435  89 93 0000045D R	        mov             solution[EBX], EDX  ; store the accepted candidate in the next slot of the solution array
 0000043B  5B			        pop             EBX

 0000043C  50			        push            EAX
 0000043D  B8 00000004		        mov             EAX, TYPE user_guess
 00000442  01 05 00000511 R	        add             T_HelperVar, EAX    ; increment index accumulator
 00000448  58			        pop             EAX


 00000449  51			    push    ECX                     ; _allowDuplicates expects a floating loop counter
 0000044A  8B CA		    mov     ECX, EDX                ; and for the random number to be stored in ECX
 0000044C  BA 00000000		    mov     EDX, FALSE              ; reset EDX to FALSE, it was overwritten in this process and we know it to be false
 00000451			    _allowDuplicates:
 00000451  89 08		    mov     [EAX], ECX              ; Store in next index

 00000453  59			    pop     ECX                     ; restore loop counter

 00000454  03 C3		    add     EAX, EBX                ; Increment index

 00000456  E2 89		    loop    _generateCode

 00000458  5A			pop         EDX
 00000459  59			pop         ECX
 0000045A  5B			pop         EBX
 0000045B  58			pop         EAX
 0000045C  5D			pop         EBP

 0000045D  C2 000C		ret         12
 00000460			GenerateCode ENDP


				; -------------------------------------------------------- -
 00000460			ArrayAt PROC
				; Author:           Trenton Young
				; Description:      Gets the nth element from an array and stores
				;                   it in EAX
				;
				; Parameters:       push n
				;                   push OFFSET array
				;                   push TYPE array
				;                   call
				;
				; Postconditions:   EAX will contain the value of array[n]
				; -------------------------------------------------------- -
 00000460  55			push                EBP
 00000461  8B EC		mov                 EBP, ESP

 00000463  53			push                EBX
 00000464  51			push                ECX
 00000465  52			push                EDX

 00000466			_stackFrame:
 00000466  8B 45 10		    mov             EAX, [EBP + 16]         ; n
 00000469  8B 5D 0C		    mov             EBX, [EBP + 12]         ; OFFSET array
 0000046C  8B 4D 08		    mov             ECX, [EBP + 8]          ; TYPE array

 0000046F  F7 E1		mul                 ECX                     ; Multiply n by the type of the array
 00000471  03 D8		add                 EBX, EAX                ; Get to array[n]
 00000473  8B 03		mov                 EAX, [EBX]              ; Save the value of array[n] to EAX

 00000475  5A			pop                 EDX
 00000476  59			pop                 ECX
 00000477  5B			pop                 EBX

 00000478  5D			pop                 EBP

 00000479  C2 000C		ret 12
 0000047C			ArrayAt ENDP

				; -------------------------------------------------------- -
 0000047C			SetColorFromPalette PROC
				; Author:           Trenton Young
				; Description:      Sets the text color to predefined palette
				;
				; Parameters:       push n
				;                   call
				;
				; Preconditions:    Parallel arrays for text and background colors
				; Postconditions:   Text color is changed
				; -------------------------------------------------------- -
 0000047C  55			push                EBP
 0000047D  8B EC		mov                 EBP, ESP

 0000047F  50			push                EAX
 00000480  53			push                EBX
 00000481  51			push                ECX

 00000482			_stackFrame:
 00000482  8B 4D 08		    mov             ECX, [EBP + 8]          ; n

				; Get the nth element of the background colormap
 00000485  51			push                ECX
 00000486  68 000002A7 R	push                OFFSET MAP_background_color
 0000048B  6A 04		push                TYPE MAP_background_color
 0000048D  E8 FFFFFFCE		call                ArrayAt

				; Multiply by 16 to shift to background position
 00000492  BB 00000010		mov                 EBX, 16
 00000497  F7 E3		mul                 EBX

				; Preserve background in EBX
 00000499  8B D8		mov                 EBX, EAX

				; Get the nth element of the foreground colormap
 0000049B  51			push                ECX
 0000049C  68 000002D3 R	push                OFFSET MAP_text_color
 000004A1  6A 04		push                TYPE MAP_text_color
 000004A3  E8 FFFFFFB8		call                ArrayAt

				; Add the background mask back on to EAX
 000004A8  03 C3		add                 EAX, EBX

				; Finally, set the color
 000004AA  E8 00000000 E	call                SetTextColor

 000004AF  59			pop                 ECX
 000004B0  5B			pop                 EBX
 000004B1  58			pop                 EAX

 000004B2  5D			pop                 EBP

 000004B3  C2 0004		ret 4
 000004B6			SetColorFromPalette ENDP

				; --------------------------------------------------------
 000004B6			PlaceFeedback PROC
				; Author:       Trenton Young
				; Description:  Draws a feedback peg at the specified location.
				;               Pass an X and Y value (0-indexed) and a number
				;               coinciding with the level of feedback
				;               - 0: miss
				;               - 1: blow
				;               - 2: hit
				;
				; Parameters:   PUSH x
				;               PUSH y
				;               PUSH feedback
				;               call
				;
				; --------------------------------------------------------
 000004B6  55			push            EBP
 000004B7  8B EC		mov             EBP, ESP

 000004B9  50			push            EAX
 000004BA  53			push            EBX
 000004BB  51			push            ECX
 000004BC  52			push            EDX

 000004BD			_stackFrame:
 000004BD  8B 4D 10		    mov         ECX, [EBP + 16]         ; x
 000004C0  8B 5D 0C		    mov         EBX, [EBP + 12]         ; y
 000004C3  8B 45 08		    mov         EAX, [EBP + 8]          ; feedback

 000004C6			_moveCursor:
 000004C6  50			    push        EAX

 000004C7  8B C3		    mov         EAX, EBX                ; insert y
 000004C9  48			    dec         EAX                     ; shift back for 1-indexing
 000004CA  BB 00000100		    mov         EBX, 256
 000004CF  F7 E3		    mul         EBX                     ; shift y to subregister AH

 000004D1  03 C1		    add         EAX, ECX                ; insert x to subregister AL
 000004D3  48			    dec         EAX                     ; shift back for 1-indexing

 000004D4  8B D0		    mov         EDX, EAX                ; move y to DH, x to DL

 000004D6  E8 00000000 E	    call        GotoXY
 000004DB  58			    pop         EAX

 000004DC  83 F8 02		cmp             EAX, HIT
 000004DF  74 2F		je              _hit

 000004E1  83 F8 01		cmp             EAX, BLOW
 000004E4  74 15		je              _blow

 000004E6			_miss:
 000004E6  6A 08		    push        8
 000004E8  E8 FFFFFF8F		    call        SetColorFromPalette
				    mPrint      GUI_feedback_miss
 000004ED  52		     1	    push        EDX
 000004EE  BA 000002A5 R     1	    mov         EDX, OFFSET GUI_feedback_miss
 000004F3  E8 00000000 E     1	    call        WriteString
 000004F8  5A		     1	    pop         EDX
 000004F9  EB 2A		    jmp         _done
 000004FB			_blow:
 000004FB  6A 09		    push        9
 000004FD  E8 FFFFFF7A		    call        SetColorFromPalette
				    mPrint      GUI_feedback_blow
 00000502  52		     1	    push        EDX
 00000503  BA 000002A3 R     1	    mov         EDX, OFFSET GUI_feedback_blow
 00000508  E8 00000000 E     1	    call        WriteString
 0000050D  5A		     1	    pop         EDX
 0000050E  EB 15		    jmp         _done
 00000510			_hit:
 00000510  6A 0A		    push        10
 00000512  E8 FFFFFF65		    call        SetColorFromPalette
				    mPrint      GUI_feedback_hit
 00000517  52		     1	    push        EDX
 00000518  BA 000002A1 R     1	    mov         EDX, OFFSET GUI_feedback_hit
 0000051D  E8 00000000 E     1	    call        WriteString
 00000522  5A		     1	    pop         EDX
 00000523  EB 00		    jmp         _done

 00000525			_done:

 00000525  5A			pop             EDX
 00000526  59			pop             ECX
 00000527  5B			pop             EBX
 00000528  58			pop             EAX

 00000529  5D			pop             EBP

 0000052A  C2 000C		ret 12
 0000052D			PlaceFeedback ENDP


				; -------------------------------------------------------- -
 0000052D			CheckSimilar PROC
				; Author:           Hla Htun (Trenton Young made small contribution)
				; Description:      Uses two arrays along with 'hits' and 'blows' variable.
				;                   Counts the number of indices with identical values between
				;                   arrays (i.e. hits)
				;                   Next, counts the number of values shared between arrays
				;                   subtracts hits from blows and returns each value
				;                   Finally updates the hits and blows variables
				;
				; Parameters:
				;                   push OFFSET blows       [12]
				;                   push OFFSEt hits        [8]
				;                   call
				;
				; Preconditions:    Must have user_guess and solution as global variables
				;                   Both of the arrays must have a size of 4
				;                   Additional global variables needed:
				;                   helperVar1, matches
				;
				; Postconditions:   Returns the number of hits and blows
				; -------------------------------------------------------- -
 0000052D  55			    push    EBP
 0000052E  8B EC		    mov     EBP, ESP

 00000530  50			    push    EAX
 00000531  53			    push    EBX
 00000532  51			    push    ECX

 00000533  B8 00000000		    mov     EAX, 0
 00000538  8B 5D 08		    mov     EBX, [EBP + 8]
 0000053B  89 03		    mov     [EBX], EAX      ; initializing hits variable
 0000053D  8B 5D 0C		    mov     EBX, [EBP + 12]
 00000540  89 03		    mov     [EBX], EAX      ; initializing blows variable
 00000542  A3 00000515 R	    mov     matches, EAX

				    ; two loop counters
				    ; ECX => i
				    ; EBX => j
 00000547  B9 00000000		    mov     ECX, 0
 0000054C			    PrintUserGuess:
 0000054C  51			        push    ECX
 0000054D  68 000004ED R	        push    OFFSET user_guess
 00000552  6A 04		        push    TYPE user_guess
 00000554  E8 FFFFFF07		        call    ArrayAt
 00000559  A3 0000050D R	        mov     helperVar1, EAX

 0000055E  51			        push    ECX
 0000055F  68 0000045D R	        push    OFFSET solution
 00000564  6A 04		        push    TYPE solution
 00000566  E8 FFFFFEF5		        call    ArrayAt
 0000056B  8B 1D 0000050D R	        mov     EBX, helperVar1
 00000571  3B D8		        cmp     EBX, EAX
 00000573  74 02		        JE      isAHit
 00000575  EB 09		        JMP     notAHit
 00000577			        isAHit:
 00000577  83 05 00000505 R	            add hits, 1
	   01
 0000057E  EB 33		            JMP outOfisThisInArray

 00000580			        notAHit:
 00000580  A3 0000050D R	            mov     helperVar1, EAX
 00000585  8B 1D 00000505 R	            mov     EBX, hits
 0000058B			            loop2ndArray:
 0000058B  53			                push    EBX
 0000058C  68 000004ED R	                push    OFFSET user_guess
 00000591  6A 04		                push    TYPE user_guess
 00000593  E8 FFFFFEC8		                call    ArrayAt
 00000598  3B 05 0000050D R	                cmp     EAX, helperVar1
 0000059E  74 0A		                JE      isAMatch
 000005A0  83 FB 03		                cmp     EBX, 3
 000005A3  74 0E		                JE      outOfisThisInArray
 000005A5  83 C3 01		                add     EBX, 1
 000005A8  EB E1		                JMP     loop2ndArray

 000005AA			            isAMatch:
 000005AA  83 05 00000515 R	                add     matches, 1
	   01
 000005B1  EB 00		                JMP     outOfisThisInArray


 000005B3			        outOfisThisInArray:
 000005B3  83 F9 03		            cmp     ECX, 3
 000005B6  74 05		            JE      outOfPrintUserGuess
 000005B8  83 C1 01		            add     ECX, 1
 000005BB  EB 8F		            JMP     PrintUserGuess

 000005BD			outOfPrintUserGuess:
 000005BD  8B 5D 08		    mov     EBX, [EBP + 8]
 000005C0  A1 00000505 R	    mov     EAX, hits
 000005C5  89 03		    mov     [EBX], EAX      ; saving to hits variable

 000005C7  A1 00000515 R	    mov     EAX, matches

 000005CC  8B 5D 0C		    mov     EBX, [EBP + 12]
 000005CF  89 03		    mov     [EBX], EAX      ; saving to blows variable

 000005D1  59			    pop     ECX
 000005D2  5B			    pop     EBX
 000005D3  58			    pop     EAX

 000005D4  5D			    pop     EBP
 000005D5  C2 0008		    ret     8
 000005D8			CheckSimilar ENDP


				; -------------------------------------------------------- -
 000005D8			PrintSolution PROC
				; Author:           Cameron Kroeker (Trenton Young made small contribution)
				; Description:      Prints the solution pegs into the [xx] spot on the table
				;
				; Parameters:
				;
				; Preconditions: Must have solution Array filled with at least 4 bytes. Gameboard must be printed before PROC is called.
				; Postconditions:  Color is set to white, EAX is set to 0.
				; -------------------------------------------------------- -
 000005D8  50			push    EAX
 000005D9  57			push    EDI

 000005DA  BF 00000000		mov EDI, 0              ; Set EDI to 0

				    ; Print the value stored in list[0]

 000005DF  8B 87 0000045D R	mov EAX, solution[EDI]
				mPlacePeg       75, 7, EAX
 000005E5  52		     2	    push        EDX
 000005E6  B2 4B	     2	    mov         dl, 75
 000005E8  FE CA	     2	    dec         dl
 000005EA  B6 07	     2	    mov         dh, 7
 000005EC  FE CE	     2	    dec         dh
 000005EE  E8 00000000 E     2	    call        Gotoxy
 000005F3  5A		     2	    pop         EDX
 000005F4  50		     1	    push        EAX
 000005F5  E8 FFFFFE82	     1	    call        SetColorFromPalette
 000005FA  52		     2	    push        EDX
 000005FB  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000600  E8 00000000 E     2	    call        WriteString
 00000605  5A		     2	    pop         EDX

 00000606  8B 87 00000461 R	mov EAX, solution[EDI+4]
				mPlacePeg       75, 9, EAX
 0000060C  52		     2	    push        EDX
 0000060D  B2 4B	     2	    mov         dl, 75
 0000060F  FE CA	     2	    dec         dl
 00000611  B6 09	     2	    mov         dh, 9
 00000613  FE CE	     2	    dec         dh
 00000615  E8 00000000 E     2	    call        Gotoxy
 0000061A  5A		     2	    pop         EDX
 0000061B  50		     1	    push        EAX
 0000061C  E8 FFFFFE5B	     1	    call        SetColorFromPalette
 00000621  52		     2	    push        EDX
 00000622  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000627  E8 00000000 E     2	    call        WriteString
 0000062C  5A		     2	    pop         EDX

 0000062D  8B 87 00000465 R	mov EAX, solution[EDI+8]
				mPlacePeg       75, 11, EAX
 00000633  52		     2	    push        EDX
 00000634  B2 4B	     2	    mov         dl, 75
 00000636  FE CA	     2	    dec         dl
 00000638  B6 0B	     2	    mov         dh, 11
 0000063A  FE CE	     2	    dec         dh
 0000063C  E8 00000000 E     2	    call        Gotoxy
 00000641  5A		     2	    pop         EDX
 00000642  50		     1	    push        EAX
 00000643  E8 FFFFFE34	     1	    call        SetColorFromPalette
 00000648  52		     2	    push        EDX
 00000649  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 0000064E  E8 00000000 E     2	    call        WriteString
 00000653  5A		     2	    pop         EDX

 00000654  8B 87 00000469 R	mov EAX, solution[EDI+12]
				mPlacePeg       75, 13, EAX
 0000065A  52		     2	    push        EDX
 0000065B  B2 4B	     2	    mov         dl, 75
 0000065D  FE CA	     2	    dec         dl
 0000065F  B6 0D	     2	    mov         dh, 13
 00000661  FE CE	     2	    dec         dh
 00000663  E8 00000000 E     2	    call        Gotoxy
 00000668  5A		     2	    pop         EDX
 00000669  50		     1	    push        EAX
 0000066A  E8 FFFFFE0D	     1	    call        SetColorFromPalette
 0000066F  52		     2	    push        EDX
 00000670  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000675  E8 00000000 E     2	    call        WriteString
 0000067A  5A		     2	    pop         EDX
				;
				;movzx EAX, solution[EDI]
				;mPlacePeg       75, 7, EAX
				;
				;movzx EAX, solution[EDI+1]
				;mPlacePeg       75, 9, EAX
				;
				;movzx EAX, solution[EDI+2]
				;mPlacePeg       75, 11, EAX
				;
				;movzx EAX, solution[EDI+3]
				;mPlacePeg       75, 13, EAX


				;Set color back to White
 0000067B  6A 08		push            8
 0000067D  E8 FFFFFDFA		call            SetColorFromPalette


 00000682  B8 00000000		mov EAX, 0

 00000687  5F			pop     EDI
 00000688  58			pop     EAX

 00000689  C3			ret
 0000068A			PrintSolution ENDP


				; -------------------------------------------------------- -
 0000068A			GetUserCode PROC
				; Author:           Brayden Aldrich
				; Description:      Gets user inputs via arrow keys and the enter key,
				;                   dynamically displays these choices, then stores desired color
				;                   into user_guess
				;
				; Helper Variables: currX, currIndex, user_guess
				;
				; Parameters:       push OFFSET array
				;                   call
				;
				; Postconditions:   Updated user_guess
				; -------------------------------------------------------- -
 0000068A  55			push            EBP
 0000068B  8B EC		mov             EBP, ESP

 0000068D  50			push            EAX
 0000068E  53			push            EBX
 0000068F  51			push            ECX
 00000690  52			push            EDX

 00000691			_init_variables:
 00000691  8B 7D 08		    mov             EDI, [EBP + 8]      ; Array offset
				    mGotoXY         1, 17               ; Move cursor to (1,17). This is where the directions will be displayed.
 00000694  52		     1	    push        EDX
 00000695  B2 01	     1	    mov         dl, 1
 00000697  FE CA	     1	    dec         dl
 00000699  B6 11	     1	    mov         dh, 17
 0000069B  FE CE	     1	    dec         dh
 0000069D  E8 00000000 E     1	    call        Gotoxy
 000006A2  5A		     1	    pop         EDX
 000006A3  B9 00000000		    mov             ECX, 0
 000006A8  89 0F		    mov             [EDI], ECX
 000006AA  89 4F 04		    mov             [EDI + 4], ECX
 000006AD  89 4F 08		    mov             [EDI + 8], ECX
 000006B0  89 4F 0C		    mov             [EDI + 12], ECX


 000006B3			_string:
				    mPrint          selectColor
 000006B3  52		     1	    push        EDX
 000006B4  BA 0000031D R     1	    mov         EDX, OFFSET selectColor
 000006B9  E8 00000000 E     1	    call        WriteString
 000006BE  5A		     1	    pop         EDX



				; Initialize the screen and ECX to show a color before the user hits the arrow keys.
 000006BF			_preloop:

 000006BF  8B 1D 0000051D R	mov             EBX, currY              ; init current y
 000006C5  A1 00000519 R	mov             EAX, currX              ; init current x
 000006CA  8B 0F		mov             ECX, [EDI]
				mPlacePeg       al, bl, ECX             ; place peg on coordinate
 000006CC  52		     2	    push        EDX
 000006CD  8A D0	     2	    mov         dl, al
 000006CF  FE CA	     2	    dec         dl
 000006D1  8A F3	     2	    mov         dh, bl
 000006D3  FE CE	     2	    dec         dh
 000006D5  E8 00000000 E     2	    call        Gotoxy
 000006DA  5A		     2	    pop         EDX
 000006DB  51		     1	    push        ECX
 000006DC  E8 FFFFFD9B	     1	    call        SetColorFromPalette
 000006E1  52		     2	    push        EDX
 000006E2  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000006E7  E8 00000000 E     2	    call        WriteString
 000006EC  5A		     2	    pop         EDX

				;  loop until user inputs a code

 000006ED			_loop:
 000006ED  B8 00000032		    mov             EAX, 50
 000006F2  E8 00000000 E	    call            Delay
 000006F7  E8 00000000 E	    call            ReadKey
 000006FC  74 EF		    jz              _loop

 000006FE  0F B7 D2		movzx           EDX, DX                 ; move key press code to edx
 00000701  83 FA 25		cmp             EDX, 37                 ; left
 00000704  74 6B		je              _decrease



 00000706  83 FA 27		cmp             EDX, 39                 ; right
 00000709  74 24		je              _increase

 0000070B  83 FA 0D		cmp             EDX, 13                 ; enter
 0000070E  0F 84 0000009F	je              _enter

 00000714  83 FA 28		cmp             EDX, 40                 ; down
 00000717  0F 84 00000096	je              _enter

 0000071D  83 FA 26		cmp             EDX, 38                 ; up
 00000720  0F 84 000000C8	je              _up

 00000726  83 FA 08		cmp             EDX, 8                  ; backspace
 00000729  0F 84 000000BF	je              _up

 0000072F			_increase:

 0000072F  83 C1 01		add             ECX, 1                  ; increment color map
 00000732  83 F9 08		cmp             ECX, 8                  ; check if current index is too high

 00000735  7D 02		jge             _resetHigh
 00000737  EB 05		jmp             _getColorHigh

 00000739			    _resetHigh:
 00000739  B9 00000000		    mov             ECX, 0              ; reset the color map to 0
 0000073E			    _getColorHigh:
 0000073E  A1 00000519 R	    mov             EAX, currX          ; move the current x index into EAX so mPlacePeg can use AL
 00000743  8B 1D 0000051D R	    mov             EBX, currY          ; move current y index into EBX so mPlacePeg can use BL
				    mPlacePeg       al, bl, ECX
 00000749  52		     2	    push        EDX
 0000074A  8A D0	     2	    mov         dl, al
 0000074C  FE CA	     2	    dec         dl
 0000074E  8A F3	     2	    mov         dh, bl
 00000750  FE CE	     2	    dec         dh
 00000752  E8 00000000 E     2	    call        Gotoxy
 00000757  5A		     2	    pop         EDX
 00000758  51		     1	    push        ECX
 00000759  E8 FFFFFD1E	     1	    call        SetColorFromPalette
 0000075E  52		     2	    push        EDX
 0000075F  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 00000764  E8 00000000 E     2	    call        WriteString
 00000769  5A		     2	    pop         EDX
 0000076A  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]

 0000076C  E9 FFFFFF7C		jmp             _loop                   ; Loop until a new key press

 00000771			_decrease:

 00000771  83 F9 00		cmp             ECX, 0
 00000774  74 05		je              _resetLow
 00000776  83 E9 01		sub             ECX, 1
 00000779  EB 05		jmp             _getColorLow
 0000077B			    _resetLow:
 0000077B  B9 00000007		    mov             ECX, 7              ; reset color to 7, looping to the top of the array
 00000780			    _getColorLow:
 00000780  A1 00000519 R	    mov             EAX, currX          ; move current x index into EAX so it can be used in mPlacePeg
 00000785  8B 1D 0000051D R	    mov             EBX, currY          ; move current y index to EBX to be used in mPlacePeg
				    mPlacePeg       al, bl, ECX
 0000078B  52		     2	    push        EDX
 0000078C  8A D0	     2	    mov         dl, al
 0000078E  FE CA	     2	    dec         dl
 00000790  8A F3	     2	    mov         dh, bl
 00000792  FE CE	     2	    dec         dh
 00000794  E8 00000000 E     2	    call        Gotoxy
 00000799  5A		     2	    pop         EDX
 0000079A  51		     1	    push        ECX
 0000079B  E8 FFFFFCDC	     1	    call        SetColorFromPalette
 000007A0  52		     2	    push        EDX
 000007A1  BA 0000029E R     2	    mov         EDX, OFFSET GUI_gameboard_pegs
 000007A6  E8 00000000 E     2	    call        WriteString
 000007AB  5A		     2	    pop         EDX
 000007AC  89 0F		    mov             [EDI], ECX          ; mov current color into array[n]

 000007AE  E9 FFFFFF3A		jmp             _loop                   ; Loop until a new key press

 000007B3			_enter:

 000007B3  83 3D 00000521 R	cmp             currIndex, 3            ; Check if 4th peg
	   03
 000007BA  74 02		je              _onlyEnter              ; jump to check if downkey pressed
 000007BC  EB 0C		jmp             _break                  ; else continue on
 000007BE			_onlyEnter:
 000007BE  83 FA 28		    cmp             EDX, 40             ; Check if downkey was pressed
 000007C1  74 02		    je              downKey             ; if so, jump to downKey
 000007C3  EB 05		    jmp             _break              ; else continue on
 000007C5			    downKey:
 000007C5  E9 FFFFFEF5		        jmp             _preloop        ; jump to preloop to avoid accidental downkey entering users code
 000007CA			_break:

 000007CA  83 C7 04		add             EDI, 4                  ; increment current index
 000007CD  A1 0000051D R	mov             EAX, currY              ; move current y coordinate into eax
 000007D2  83 C0 02		add             EAX, 2                  ; incease it by 2
 000007D5  A3 0000051D R	mov             currY, EAX              ; store updated currY

 000007DA  FF 05 00000521 R	inc             currIndex               ; increment current index in user_guess
 000007E0  83 3D 00000521 R	cmp             currIndex, 4            ; check to see if it's over array limit
	   04
 000007E7  7D 30		jge             _end
 000007E9  E9 FFFFFED1		jmp             _preloop                ; loop to get a new number

 000007EE			_up:
 000007EE  A1 0000051D R	    mov         EAX, currY
 000007F3  83 F8 07		    cmp         EAX, 7                  ; compare current y coord with 7. If it's 7, just go back to looping.
 000007F6  0F 84 FFFFFEF1	    je          _loop
 000007FC  83 E8 02		    sub         EAX, 2                  ; subtract 2 from currY to get to peg above currY
 000007FF  A3 0000051D R	    mov         currY, EAX
 00000804  83 EF 04		    sub         EDI, 4                  ; move array pointer back to previous entry
 00000807  A1 00000521 R	    mov         EAX, currIndex
 0000080C  83 E8 01		    sub         EAX, 1                  ; subtract 1 from currIndex
 0000080F  A3 00000521 R	    mov         currIndex, EAX
 00000814  E9 FFFFFEA6		    jmp         _preloop                ; go to preloop


 00000819			_end:                                   ; break out of loop and return
 00000819  6A 08		push            8
 0000081B  E8 FFFFFC5C		call            SetColorFromPalette     ; set color back to white

 00000820  C7 05 0000051D R	mov             currY, 7                ; reset currY for next round
	   00000007
 0000082A  A1 00000519 R	mov             EAX, currX              ; set currX to currX + 8 to get next round x coordinate
 0000082F  83 C0 08		add             EAX, 8

 00000832  5A			pop             EDX
 00000833  59			pop             ECX
 00000834  5B			pop             EBX
 00000835  58			pop             EAX
 00000836  5D			pop             EBP
 00000837  C2 0004		ret 4
 0000083A			GetUserCode ENDP


				; -------------------------------------------------------- -
 0000083A			PromptMsg PROC
				; Author:           Trenton Young
				; Description:      Gets the user's input in the form of text
				;                   input and then stores the corresponding
				;                   boolean value in EAX
				;
				; Parameters:       push OFFSET message
				;                   call
				;
				; Postconditions:   EAX will contain the TRUE or FALSE
				; -------------------------------------------------------- -
 0000083A  55			push                EBP
 0000083B  8B EC		mov                 EBP, ESP

 0000083D  51			push                ECX
 0000083E  52			push                EDX

				; Set text color to default
				;push                8
				;call                SetColorFromPalette

 0000083F			_stackFrame:
 0000083F  8B 55 08		    mov             EDX, [EBP + 8]          ; OFFSET message

 00000842  E8 00000000 E	call                WriteString
 00000847  E8 00000000 E	call                Crlf

 0000084C  EB 1D		jmp _endInvalid
 0000084E			_invalid:
				    ; Set to error message color
 0000084E  6A 0A		    push            10
 00000850  E8 FFFFFC27		    call            SetColorFromPalette

 00000855  BA 00000369 R	    mov             EDX, OFFSET invalidCharMsg
 0000085A  E8 00000000 E	    call            WriteString
 0000085F  E8 00000000 E	    call            Crlf

 00000864  6A 08		    push            8
 00000866  E8 FFFFFC11		    call            SetColorFromPalette
 0000086B			_endInvalid:

 0000086B  E8 00000000 E	call                ReadChar

 00000870  0F B6 15		movzx               EDX, YES
	   000002FF R
 00000877  0F B6 C8		movzx               ECX, AL
 0000087A  3B D1		cmp                 EDX, ECX
 0000087C  74 10		je                  _true

 0000087E  0F B6 15		movzx               EDX, NO
	   00000300 R
 00000885  0F B6 C8		movzx               ECX, AL
 00000888  3B D1		cmp                 EDX, ECX
 0000088A  74 09		je                  _false

 0000088C  EB C0		jmp                 _invalid

 0000088E			_true:
 0000088E  B8 00000001		    mov             EAX, TRUE
 00000893  EB 05		    jmp             _end

 00000895			_false:
 00000895  B8 00000000		    mov             EAX, FALSE

 0000089A			_end:

 0000089A  5A			pop                 EDX
 0000089B  59			pop                 ECX

 0000089C  5D			pop                 EBP

 0000089D  C2 0004		ret 4
 000008A0			PromptMsg ENDP

				; -------------------------------------------------------- -
 000008A0			PlaceFeedbackGameTurn PROC
				; Author:           Hla Htun
				; Description:      Places the feedback for specific round
				;
				; Parameters:       push    current_round    ; this is the nth round
				;                   call
				;
				; Postconditions:   Feedbacks will be displayed on the GameBoard
				;                   for that specific round
				; -------------------------------------------------------- -
 000008A0  55			    push        EBP
 000008A1  8B EC		    mov         EBP, ESP
 000008A3  51			    push        ECX
 000008A4  53			    push        EBX
 000008A5  50			    push        EAX

 000008A6  8B 45 08		    mov         EAX, [EBP + 8]          ; current round number

 000008A9  83 F8 08		    cmp         EAX, 8
 000008AC  74 20		    JE          _roundOne
 000008AE  83 F8 07		    cmp         EAX, 7
 000008B1  74 27		    JE          _roundTwo
 000008B3  83 F8 06		    cmp         EAX, 6
 000008B6  74 2E		    JE          _roundThree
 000008B8  83 F8 05		    cmp         EAX, 5
 000008BB  74 35		    JE          _roundFour
 000008BD  83 F8 04		    cmp         EAX, 4
 000008C0  74 3C		    JE          _roundFive
 000008C2  83 F8 03		    cmp         EAX, 3
 000008C5  74 43		    JE          _roundSix
 000008C7  83 F8 02		    cmp         EAX, 2
 000008CA  74 4A		    JE          _roundSeven
 000008CC  EB 54		    JMP         _roundEight

 000008CE			    _roundOne:
 000008CE  C7 05 00000835 R	        mov     H_HelperVarX, 7         ; move cursor
	   00000007
 000008D8  EB 54		        JMP     _printDraft
 000008DA			    _roundTwo:
 000008DA  C7 05 00000835 R	        mov     H_HelperVarX, 15        ; move cursor
	   0000000F
 000008E4  EB 48		        JMP     _printDraft
 000008E6			    _roundThree:
 000008E6  C7 05 00000835 R	        mov     H_HelperVarX, 23        ; move cursor
	   00000017
 000008F0  EB 3C		        JMP     _printDraft
 000008F2			    _roundFour:
 000008F2  C7 05 00000835 R	        mov     H_HelperVarX, 31        ; move cursor
	   0000001F
 000008FC  EB 30		        JMP     _printDraft
 000008FE			    _roundFive:
 000008FE  C7 05 00000835 R	        mov     H_HelperVarX, 39        ; move cursor
	   00000027
 00000908  EB 24		        JMP     _printDraft
 0000090A			    _roundSix:
 0000090A  C7 05 00000835 R	        mov     H_HelperVarX, 47        ; move cursor
	   0000002F
 00000914  EB 18		        JMP     _printDraft
 00000916			    _roundSeven:
 00000916  C7 05 00000835 R	        mov     H_HelperVarX, 55        ; move cursor
	   00000037
 00000920  EB 0C		        JMP     _printDraft
 00000922			    _roundEight:
 00000922  C7 05 00000835 R	        mov     H_HelperVarX, 63            ; move cursor
	   0000003F
 0000092C  EB 00		        JMP     _printDraft

 0000092E			    _printDraft:
 0000092E  C7 05 00000839 R	        mov     H_HelperVarY, 4
	   00000004
 00000938  C7 05 0000083D R	        mov     H_HelperVarMovY, 0
	   00000000
 00000942  83 3D 00000505 R	        cmp     hits, 0                     ; if no hits, don't draw
	   00
 00000949  74 4F		        JE      _outofPrintHitsHH

 0000094B  BB 00000000		        mov     EBX, 0
 00000950			        _printHitsHH:
 00000950  83 3D 0000083D R	            cmp     H_HelperVarMovY, 2      ; see if Y needs to be incremented
	   02
 00000957  7C 17		            JL      _continue1HH
 00000959  FF 05 00000839 R	            inc     H_HelperVarY
 0000095F  83 2D 00000835 R	            sub     H_HelperVarX, 2
	   02
 00000966  C7 05 0000083D R	            mov     H_HelperVarMovY, 0
	   00000000
 00000970			            _continue1HH:
				                mPlaceFeedback H_HelperVarX, H_HelperVarY, HIT      ; draw hit
 00000970  FF 35 00000835 R  1	    push        H_HelperVarX
 00000976  FF 35 00000839 R  1	    push        H_HelperVarY
 0000097C  6A 02	     1	    push        HIT
 0000097E  E8 FFFFFB33	     1	    call        PlaceFeedback
 00000983  FF 05 00000835 R	                inc     H_HelperVarX                                ; move X
 00000989  FF 05 0000083D R	                inc     H_HelperVarMovY                             ; increment MovY counter

 0000098F  43			            inc EBX
 00000990  3B 1D 00000505 R	            cmp EBX, hits
 00000996  7D 02		            JGE _outofPrintHitsHH
 00000998  EB B6		            JMP _printHitsHH
 0000099A			        _outofPrintHitsHH:

 0000099A  C7 05 00000839 R	        mov     H_HelperVarY, 4
	   00000004
 000009A4  83 3D 00000509 R	        cmp     blows, 0                ; if no blows, don't draw
	   00
 000009AB  74 4F		        JE      _outofPrintBlowsHH
 000009AD  BB 00000000		        mov     EBX, 0
 000009B2			        _printBlowsHH:
 000009B2  83 3D 0000083D R	            cmp     H_HelperVarMovY, 2  ; see if Y needs to be incremented
	   02
 000009B9  7C 17		            JL      _continue2HH
 000009BB  FF 05 00000839 R	            inc     H_HelperVarY
 000009C1  83 2D 00000835 R	            sub     H_HelperVarX, 2
	   02
 000009C8  C7 05 0000083D R	            mov     H_HelperVarMovY, 0
	   00000000
 000009D2			            _continue2HH:
				                mPlaceFeedback H_HelperVarX, H_HelperVarY, BLOW     ; draw blow
 000009D2  FF 35 00000835 R  1	    push        H_HelperVarX
 000009D8  FF 35 00000839 R  1	    push        H_HelperVarY
 000009DE  6A 01	     1	    push        BLOW
 000009E0  E8 FFFFFAD1	     1	    call        PlaceFeedback
 000009E5  FF 05 00000835 R	                inc     H_HelperVarX                                ; move X
 000009EB  FF 05 0000083D R	                inc     H_HelperVarMovY                             ; increment MovY counter

 000009F1  43			            inc EBX
 000009F2  3B 1D 00000509 R	            cmp EBX, blows
 000009F8  7D 02		            JGE _outofPrintBlowsHH
 000009FA  EB B6		            JMP _printBlowsHH
 000009FC			        _outofPrintBlowsHH:


 000009FC			    _outofPrintDraft:
 000009FC  C7 05 00000839 R	        mov H_HelperVarY, 4
	   00000004

 00000A06  58			    pop         EAX
 00000A07  5B			    pop         EBX
 00000A08  59			    pop         ECX
 00000A09  5D			    pop         EBP
 00000A0A  C3			ret
 00000A0B			PlaceFeedbackGameTurn ENDP

				; -------------------------------------------------------- -
 00000A0B			debugHH     PROC
				; Author:           Hla Htun
				; Description:      Prints out user_guess and solution arrays
				;                   along with the round number, hits and blows
				;
				; Parameters:       mGotoXY   1, 25     ; needs to move cursor
				;                   call                ; below the GameBoard
				;
				; -------------------------------------------------------- -
 00000A0B  51			    push    ECX
 00000A0C  50			    push    EAX

 00000A0D  B0 52		    mov     AL, 'R'
 00000A0F  E8 00000000 E	    call    WriteChar
 00000A14  A1 00000459 R	    mov     EAX, current_round
 00000A19  83 C0 01		    add     EAX, 1
 00000A1C  E8 00000000 E	    call    WriteDec
 00000A21  E8 00000000 E	    call    Crlf
 00000A26  B9 00000000		    mov     ECX, 0
 00000A2B			    _printHH:
 00000A2B  51			         push       ECX
 00000A2C  68 000004ED R	         push       OFFSET user_guess
 00000A31  6A 04		         push       TYPE user_guess
 00000A33  E8 FFFFFA28		         call       ArrayAt
 00000A38  E8 00000000 E	         call       WriteDec
 00000A3D  B0 2D		         mov        AL, '-'
 00000A3F  E8 00000000 E	         call       WriteChar
 00000A44  83 F9 03		         cmp        ECX, 3
 00000A47  74 03		         JE         _outofPrintHH
 00000A49  41			         inc        ECX
 00000A4A  EB DF		         JMP        _printHH
 00000A4C			    _outofPrintHH:
 00000A4C  E8 00000000 E	        call        Crlf


 00000A51  B9 00000000		    mov     ECX, 0
 00000A56			    _printHH2:
 00000A56  51			         push       ECX
 00000A57  68 0000045D R	         push       OFFSET solution
 00000A5C  6A 04		         push       TYPE solution
 00000A5E  E8 FFFFF9FD		         call       ArrayAt
 00000A63  E8 00000000 E	         call       WriteDec
 00000A68  B0 2D		         mov        AL, '-'
 00000A6A  E8 00000000 E	         call       WriteChar
 00000A6F  83 F9 03		         cmp        ECX, 3
 00000A72  74 03		         JE         _outofPrintHH2
 00000A74  41			         inc        ECX
 00000A75  EB DF		         JMP        _printHH2
 00000A77			    _outofPrintHH2:
 00000A77  E8 00000000 E	        call        Crlf


				    mGotoXY         1, 22
 00000A7C  52		     1	    push        EDX
 00000A7D  B2 01	     1	    mov         dl, 1
 00000A7F  FE CA	     1	    dec         dl
 00000A81  B6 16	     1	    mov         dh, 22
 00000A83  FE CE	     1	    dec         dh
 00000A85  E8 00000000 E     1	    call        Gotoxy
 00000A8A  5A		     1	    pop         EDX
 00000A8B			    _printHH3:
 00000A8B  B0 48		        mov     AL, 'H'
 00000A8D  E8 00000000 E	        call    WriteChar
 00000A92  A1 00000505 R	        mov     EAX, hits
 00000A97  E8 00000000 E	        call    WriteDec
 00000A9C  E8 00000000 E	        call    Crlf

 00000AA1  B0 42		        mov     AL, 'B'
 00000AA3  E8 00000000 E	        call    WriteChar
 00000AA8  A1 00000509 R	        mov     EAX, blows
 00000AAD  E8 00000000 E	        call    WriteDec
 00000AB2  E8 00000000 E	        call    Crlf

 00000AB7			    _outofPrintHH3:

 00000AB7			    _printHH4:

 00000AB7			    _outofPrintHH4:
 00000AB7  58			    pop     EAX
 00000AB8  59			    pop     ECX
 00000AB9  C3			ret
 00000ABA			debugHH     ENDP

				; -------------------------------------------------------- -
 00000ABA			getName PROC
				; Author:           Cameron Kroeker
				; Description:      Gets the user's input in the form of string
				;                   and stores in DWORD Uname
				;
				; Parameters:       needs a variable DWORD named userName,
				;                   needs variables BYTE prompt_userName,
				;                   and BYTE greeting
				;                   
				;
				; Postconditions:   Prompts the screen and set's userName to userinput, then greets user with custom input.
				; -------------------------------------------------------- -

				     ;Uname DWORD ?
				     ;namePrompt BYTE "Please enter your name: ",0
				     ;greeting BYTE "Hello, "
 00000ABA  6A 08		    push            8
 00000ABC  E8 FFFFF9BB		    call            SetColorFromPalette

 00000AC1			    _getName:
					    mPrint  prompt_userName
 00000AC1  52		     1	    push        EDX
 00000AC2  BA 00000958 R     1	    mov         EDX, OFFSET prompt_userName
 00000AC7  E8 00000000 E     1	    call        WriteString
 00000ACC  5A		     1	    pop         EDX
 00000ACD  BA 00000970 R	        mov     EDX, OFFSET userName
 00000AD2  B9 00000014		        mov     ECX, 20             ; allowed size
 00000AD7  E8 00000000 E	        call    ReadString          ; stores user name in userName
 00000ADC  E8 00000000 E	        call    Clrscr

 00000AE1			    _greetUser:
				        mPrint     greeting
 00000AE1  52		     1	    push        EDX
 00000AE2  BA 00000301 R     1	    mov         EDX, OFFSET greeting
 00000AE7  E8 00000000 E     1	    call        WriteString
 00000AEC  5A		     1	    pop         EDX
				        mPrint     userName
 00000AED  52		     1	    push        EDX
 00000AEE  BA 00000970 R     1	    mov         EDX, OFFSET userName
 00000AF3  E8 00000000 E     1	    call        WriteString
 00000AF8  5A		     1	    pop         EDX
				        mPrint     exclamation
 00000AF9  52		     1	    push        EDX
 00000AFA  BA 00000319 R     1	    mov         EDX, OFFSET exclamation
 00000AFF  E8 00000000 E     1	    call        WriteString
 00000B04  5A		     1	    pop         EDX

 00000B05  C3			ret
 00000B06			getName ENDP

				; -------------------------------------------------------- -
 00000B06			RSum PROC
				; Author:           Brayden Aldrich
				; Description:      Sums numbers [0...n] recursively.
				;
				; Parameters:       call RSum
				;                   
				; Postconditions:   Call Writedec to see output on console.
				; -------------------------------------------------------- -
 00000B06  83 F9 00		cmp 		ECX, 0
 00000B09  74 08		jz 			_end
 00000B0B  03 C1		add 		EAX, ECX
 00000B0D  49			dec 		ECX
 00000B0E  E8 FFFFFFF3		call 		RSum
 00000B13			_end:
 00000B13  A3 00000B0F R	mov 		REC_answer, EAX
 00000B18  C2 0004		ret 4
 00000B1B			RSum endp

				; -------------------------------------------------------- -
 00000B1B			AddFPU PROC
				; Author:           Brayden Aldrich
				; Description:      Gets two real numbers from user and calculates their sum
				;
				; Parameters:       Call AddFPU
				;                   
				; Postconditions:   Sum outputted on console
				; -------------------------------------------------------- -

 00000B1B  9B DB E3		finit
 00000B1E  BA 000009FF R	mov 	EDX, OFFSET FPU_intro_string
 00000B23  E8 00000000 E	call 	WriteString
 00000B28  BA 00000A26 R	mov 	EDX, OFFSET FPU_getUserFirstNum
 00000B2D  E8 00000000 E	call 	WriteString
 00000B32  E8 00000000 E	call 	ReadFloat
 00000B37  BA 00000A4D R	mov 	EDX, OFFSET FPU_getUserSecNum
 00000B3C  E8 00000000 E	call 	WriteString
 00000B41  E8 00000000 E	call 	ReadFloat
 00000B46  D8 C1		FADD 	ST(0), ST(1)
 00000B48  E8 00000000 E	call 	WriteFloat
 00000B4D  E8 00000000 E	call    CrLf

 00000B52  C3			ret
 00000B53			AddFPU  ENDP



				END main
Microsoft (R) Macro Assembler Version 14.35.32217.1	    06/12/23 07:08:54
Mastermind			(finalProject.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mArand . . . . . . . . . . . . .	Proc
mArrayFlatten  . . . . . . . . .	Proc
mGotoXY  . . . . . . . . . . . .	Proc
mIsArrayElementEqual . . . . . .	Proc
mPlaceFeedback . . . . . . . . .	Proc
mPlacePeg  . . . . . . . . . . .	Proc
mPrint . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000B13 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000B53 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AddFPU . . . . . . . . . . . . .	P Near	 00000B1B _TEXT	Length= 00000038 Public STDCALL
ArrayAt  . . . . . . . . . . . .	P Near	 00000460 _TEXT	Length= 0000001C Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000466 _TEXT	
CheckSimilar . . . . . . . . . .	P Near	 0000052D _TEXT	Length= 000000AB Public STDCALL
  PrintUserGuess . . . . . . . .	L Near	 0000054C _TEXT	
  isAHit . . . . . . . . . . . .	L Near	 00000577 _TEXT	
  notAHit  . . . . . . . . . . .	L Near	 00000580 _TEXT	
  loop2ndArray . . . . . . . . .	L Near	 0000058B _TEXT	
  isAMatch . . . . . . . . . . .	L Near	 000005AA _TEXT	
  outOfisThisInArray . . . . . .	L Near	 000005B3 _TEXT	
  outOfPrintUserGuess  . . . . .	L Near	 000005BD _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawNewGameboard . . . . . . . .	P Near	 0000030E _TEXT	Length= 00000087 Public STDCALL
  _printPlayArea . . . . . . . .	L Near	 00000355 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateCode . . . . . . . . . .	P Near	 00000395 _TEXT	Length= 000000CB Public STDCALL
  _clearCheckArrays  . . . . . .	L Near	 000003B0 _TEXT	
  _stackFrame  . . . . . . . . .	L Near	 000003D3 _TEXT	
  _generateCode  . . . . . . . .	L Near	 000003E1 _TEXT	
  _checkCode . . . . . . . . . .	L Near	 00000407 _TEXT	
  _allowDuplicates . . . . . . .	L Near	 00000451 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserCode  . . . . . . . . . .	P Near	 0000068A _TEXT	Length= 000001B0 Public STDCALL
  _init_variables  . . . . . . .	L Near	 00000691 _TEXT	
  _string  . . . . . . . . . . .	L Near	 000006B3 _TEXT	
  _preloop . . . . . . . . . . .	L Near	 000006BF _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 000006ED _TEXT	
  _increase  . . . . . . . . . .	L Near	 0000072F _TEXT	
  _resetHigh . . . . . . . . . .	L Near	 00000739 _TEXT	
  _getColorHigh  . . . . . . . .	L Near	 0000073E _TEXT	
  _decrease  . . . . . . . . . .	L Near	 00000771 _TEXT	
  _resetLow  . . . . . . . . . .	L Near	 0000077B _TEXT	
  _getColorLow . . . . . . . . .	L Near	 00000780 _TEXT	
  _enter . . . . . . . . . . . .	L Near	 000007B3 _TEXT	
  _onlyEnter . . . . . . . . . .	L Near	 000007BE _TEXT	
  downKey  . . . . . . . . . . .	L Near	 000007C5 _TEXT	
  _break . . . . . . . . . . . .	L Near	 000007CA _TEXT	
  _up  . . . . . . . . . . . . .	L Near	 000007EE _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000819 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaceFeedbackGameTurn  . . . . .	P Near	 000008A0 _TEXT	Length= 0000016B Public STDCALL
  _roundOne  . . . . . . . . . .	L Near	 000008CE _TEXT	
  _roundTwo  . . . . . . . . . .	L Near	 000008DA _TEXT	
  _roundThree  . . . . . . . . .	L Near	 000008E6 _TEXT	
  _roundFour . . . . . . . . . .	L Near	 000008F2 _TEXT	
  _roundFive . . . . . . . . . .	L Near	 000008FE _TEXT	
  _roundSix  . . . . . . . . . .	L Near	 0000090A _TEXT	
  _roundSeven  . . . . . . . . .	L Near	 00000916 _TEXT	
  _roundEight  . . . . . . . . .	L Near	 00000922 _TEXT	
  _printDraft  . . . . . . . . .	L Near	 0000092E _TEXT	
  _printHitsHH . . . . . . . . .	L Near	 00000950 _TEXT	
  _continue1HH . . . . . . . . .	L Near	 00000970 _TEXT	
  _outofPrintHitsHH  . . . . . .	L Near	 0000099A _TEXT	
  _printBlowsHH  . . . . . . . .	L Near	 000009B2 _TEXT	
  _continue2HH . . . . . . . . .	L Near	 000009D2 _TEXT	
  _outofPrintBlowsHH . . . . . .	L Near	 000009FC _TEXT	
  _outofPrintDraft . . . . . . .	L Near	 000009FC _TEXT	
PlaceFeedback  . . . . . . . . .	P Near	 000004B6 _TEXT	Length= 00000077 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 000004BD _TEXT	
  _moveCursor  . . . . . . . . .	L Near	 000004C6 _TEXT	
  _miss  . . . . . . . . . . . .	L Near	 000004E6 _TEXT	
  _blow  . . . . . . . . . . . .	L Near	 000004FB _TEXT	
  _hit . . . . . . . . . . . . .	L Near	 00000510 _TEXT	
  _done  . . . . . . . . . . . .	L Near	 00000525 _TEXT	
PrintSolution  . . . . . . . . .	P Near	 000005D8 _TEXT	Length= 000000B2 Public STDCALL
PromptMsg  . . . . . . . . . . .	P Near	 0000083A _TEXT	Length= 00000066 Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 0000083F _TEXT	
  _invalid . . . . . . . . . . .	L Near	 0000084E _TEXT	
  _endInvalid  . . . . . . . . .	L Near	 0000086B _TEXT	
  _true  . . . . . . . . . . . .	L Near	 0000088E _TEXT	
  _false . . . . . . . . . . . .	L Near	 00000895 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000089A _TEXT	
RSum . . . . . . . . . . . . . .	P Near	 00000B06 _TEXT	Length= 00000015 Public STDCALL
  _end . . . . . . . . . . . . .	L Near	 00000B13 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorFromPalette  . . . . . .	P Near	 0000047C _TEXT	Length= 0000003A Public STDCALL
  _stackFrame  . . . . . . . . .	L Near	 00000482 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
debugHH  . . . . . . . . . . . .	P Near	 00000A0B _TEXT	Length= 000000AF Public STDCALL
  _printHH . . . . . . . . . . .	L Near	 00000A2B _TEXT	
  _outofPrintHH  . . . . . . . .	L Near	 00000A4C _TEXT	
  _printHH2  . . . . . . . . . .	L Near	 00000A56 _TEXT	
  _outofPrintHH2 . . . . . . . .	L Near	 00000A77 _TEXT	
  _printHH3  . . . . . . . . . .	L Near	 00000A8B _TEXT	
  _outofPrintHH3 . . . . . . . .	L Near	 00000AB7 _TEXT	
  _printHH4  . . . . . . . . . .	L Near	 00000AB7 _TEXT	
  _outofPrintHH4 . . . . . . . .	L Near	 00000AB7 _TEXT	
getName  . . . . . . . . . . . .	P Near	 00000ABA _TEXT	Length= 0000004C Public STDCALL
  _getName . . . . . . . . . . .	L Near	 00000AC1 _TEXT	
  _greetUser . . . . . . . . . .	L Near	 00000AE1 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000030E Public STDCALL
  FPUandREC  . . . . . . . . . .	L Near	 00000000 _TEXT	
  start  . . . . . . . . . . . .	L Near	 00000025 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000044 _TEXT	
  _valid . . . . . . . . . . . .	L Near	 00000052 _TEXT	
  _l . . . . . . . . . . . . . .	L Near	 00000089 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
  ProgramSetup . . . . . . . . .	L Near	 000000A5 _TEXT	
  InitialGreeting  . . . . . . .	L Near	 000000B4 _TEXT	
  PromptForRules . . . . . . . .	L Near	 000000BE _TEXT	
  DisplayRules . . . . . . . . .	L Near	 000000D8 _TEXT	
  NewGameState . . . . . . . . .	L Near	 000001C6 _TEXT	
  GenerateGamestate  . . . . . .	L Near	 0000022F _TEXT	
  GameTurn . . . . . . . . . . .	L Near	 00000255 _TEXT	
  WinnerCelebration  . . . . . .	L Near	 0000029F _TEXT	
  LoserAdmonishment  . . . . . .	L Near	 000002C6 _TEXT	
  PromptForPlayAgain . . . . . .	L Near	 000002E8 _TEXT	
  _Farewell  . . . . . . . . . .	L Near	 000002FB _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOW . . . . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CODE_LENGTH  . . . . . . . . . .	Number	 00000004h   
COLORS . . . . . . . . . . . . .	Number	 00000008h   
COLS . . . . . . . . . . . . . .	Number	 00000008h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Celebration  . . . . . . . . . .	Byte	 00000845 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FPU_getUserFirstNum  . . . . . .	Byte	 00000A26 _DATA	
FPU_getUserSecNum  . . . . . . .	Byte	 00000A4D _DATA	
FPU_intro_string . . . . . . . .	Byte	 000009FF _DATA	
FPU_result . . . . . . . . . . .	Byte	 00000A75 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GUI_feedback_blow  . . . . . . .	Byte	 000002A3 _DATA	
GUI_feedback_hit . . . . . . . .	Byte	 000002A1 _DATA	
GUI_feedback_miss  . . . . . . .	Byte	 000002A5 _DATA	
GUI_gameboard_ACCENT . . . . . .	Byte	 000001F8 _DATA	
GUI_gameboard_A  . . . . . . . .	Byte	 00000000 _DATA	
GUI_gameboard_B  . . . . . . . .	Byte	 00000054 _DATA	
GUI_gameboard_C  . . . . . . . .	Byte	 000000A8 _DATA	
GUI_gameboard_DE . . . . . . . .	Byte	 000000FC _DATA	
GUI_gameboard_PEG  . . . . . . .	Byte	 000001A4 _DATA	
GUI_gameboard_SPACE  . . . . . .	Byte	 00000150 _DATA	
GUI_gameboard_Z  . . . . . . . .	Byte	 0000024C _DATA	
GUI_gameboard_pegs . . . . . . .	Byte	 0000029E _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIT  . . . . . . . . . . . . . .	Number	 00000002h   
H_HelperVar1 . . . . . . . . . .	DWord	 0000082D _DATA	
H_HelperVar2 . . . . . . . . . .	DWord	 00000831 _DATA	
H_HelperVarMovY  . . . . . . . .	DWord	 0000083D _DATA	
H_HelperVarX . . . . . . . . . .	DWord	 00000835 _DATA	
H_HelperVarY . . . . . . . . . .	DWord	 00000839 _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
Loser  . . . . . . . . . . . . .	Byte	 00000897 _DATA	
MAP_background_color . . . . . .	DWord	 000002A7 _DATA	
MAP_text_color . . . . . . . . .	DWord	 000002D3 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MISS . . . . . . . . . . . . . .	Number	 00000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NO . . . . . . . . . . . . . . .	Byte	 00000300 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OUT_OF_RANGE_1 . . . . . . . . .	Number	 00000064h   
OUT_OF_RANGE_2 . . . . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
REC_answer . . . . . . . . . . .	DWord	 00000B0F _DATA	
REC_final  . . . . . . . . . . .	Byte	 00000AE4 _DATA	
REC_getN . . . . . . . . . . . .	Byte	 00000AC1 _DATA	
REC_intro  . . . . . . . . . . .	Byte	 00000A9C _DATA	
REC_n  . . . . . . . . . . . . .	DWord	 00000AE0 _DATA	
REQ_moveon . . . . . . . . . . .	Byte	 000009E3 _DATA	
REQ_question . . . . . . . . . .	Byte	 00000971 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUNDS . . . . . . . . . . . . .	Number	 00000008h   
ROWS . . . . . . . . . . . . . .	Number	 00000004h   
RULES_10 . . . . . . . . . . . .	Byte	 000007EE _DATA	
RULES_1  . . . . . . . . . . . .	Byte	 00000525 _DATA	
RULES_2  . . . . . . . . . . . .	Byte	 00000537 _DATA	
RULES_3  . . . . . . . . . . . .	Byte	 0000056F _DATA	
RULES_4  . . . . . . . . . . . .	Byte	 000005DC _DATA	
RULES_5  . . . . . . . . . . . .	Byte	 00000650 _DATA	
RULES_6  . . . . . . . . . . . .	Byte	 000006A7 _DATA	
RULES_7  . . . . . . . . . . . .	Byte	 000006D5 _DATA	
RULES_8  . . . . . . . . . . . .	Byte	 00000730 _DATA	
RULES_9  . . . . . . . . . . . .	Byte	 0000078A _DATA	
RULES_GAP  . . . . . . . . . . .	Byte	 00000530 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
T_HelperVar  . . . . . . . . . .	DWord	 00000511 _DATA	
USER_NAME_LEN  . . . . . . . . .	Number	 00000018h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
YES  . . . . . . . . . . . . . .	Byte	 000002FF _DATA	
allowDuplicates  . . . . . . . .	DWord	 00000501 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blows  . . . . . . . . . . . . .	DWord	 00000509 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currIndex  . . . . . . . . . . .	DWord	 00000521 _DATA	
currX  . . . . . . . . . . . . .	DWord	 00000519 _DATA	
currY  . . . . . . . . . . . . .	DWord	 0000051D _DATA	
current_round  . . . . . . . . .	DWord	 00000459 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exclamation  . . . . . . . . . .	Byte	 00000319 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 000008EA _DATA	
game_matrix  . . . . . . . . . .	DWord	 0000046D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000301 _DATA	
hasWon . . . . . . . . . . . . .	DWord	 00000841 _DATA	
helperVar1 . . . . . . . . . . .	DWord	 0000050D _DATA	
hits . . . . . . . . . . . . . .	DWord	 00000505 _DATA	
invalidCharMsg . . . . . . . . .	Byte	 00000369 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 00000515 _DATA	
prompt_duplicates  . . . . . . .	Byte	 000003D5 _DATA	
prompt_rules . . . . . . . . . .	Byte	 00000398 _DATA	
prompt_tryAgain  . . . . . . . .	Byte	 000008C2 _DATA	
prompt_userName  . . . . . . . .	Byte	 00000958 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rules_placeholder  . . . . . . .	Byte	 00000384 _DATA	
selectColor  . . . . . . . . . .	Byte	 0000031D _DATA	
solution . . . . . . . . . . . .	DWord	 0000045D _DATA	
userHasWon . . . . . . . . . . .	DWord	 000004FD _DATA	
userName . . . . . . . . . . . .	Byte	 00000970 _DATA	
user_guess . . . . . . . . . . .	DWord	 000004ED _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
